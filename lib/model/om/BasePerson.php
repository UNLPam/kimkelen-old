<?php

/**
 * Base class that represents a row from the 'person' table.
 *
 * Representa los datos comunes para las diferentes personas del sistema
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Thu Aug 23 21:09:10 2018
 *
 * @package    lib.model.om
 */
abstract class BasePerson extends BaseObject  implements Persistent {


  const PEER = 'PersonPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PersonPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the lastname field.
	 * @var        string
	 */
	protected $lastname;

	/**
	 * The value for the firstname field.
	 * @var        string
	 */
	protected $firstname;

	/**
	 * The value for the identification_type field.
	 * @var        int
	 */
	protected $identification_type;

	/**
	 * The value for the identification_number field.
	 * @var        string
	 */
	protected $identification_number;

	/**
	 * The value for the sex field.
	 * @var        int
	 */
	protected $sex;

	/**
	 * The value for the cuil field.
	 * @var        string
	 */
	protected $cuil;

	/**
	 * The value for the is_active field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $is_active;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the phone field.
	 * @var        string
	 */
	protected $phone;

	/**
	 * The value for the birthdate field.
	 * @var        string
	 */
	protected $birthdate;

	/**
	 * The value for the birth_country field.
	 * @var        string
	 */
	protected $birth_country;

	/**
	 * The value for the birth_state field.
	 * @var        string
	 */
	protected $birth_state;

	/**
	 * The value for the birth_city field.
	 * @var        string
	 */
	protected $birth_city;

	/**
	 * The value for the observations field.
	 * @var        string
	 */
	protected $observations;

	/**
	 * The value for the civil_status field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $civil_status;

	/**
	 * The value for the address_id field.
	 * @var        int
	 */
	protected $address_id;

	/**
	 * The value for the user_id field.
	 * @var        int
	 */
	protected $user_id;

	/**
	 * The value for the photo field.
	 * @var        string
	 */
	protected $photo;

	/**
	 * @var        Address
	 */
	protected $aAddress;

	/**
	 * @var        sfGuardUser
	 */
	protected $asfGuardUser;

	/**
	 * @var        array StudentDisciplinarySanction[] Collection to store aggregation of StudentDisciplinarySanction objects.
	 */
	protected $collStudentDisciplinarySanctionsRelatedByApplicantId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collStudentDisciplinarySanctionsRelatedByApplicantId.
	 */
	private $lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria = null;

	/**
	 * @var        array StudentDisciplinarySanction[] Collection to store aggregation of StudentDisciplinarySanction objects.
	 */
	protected $collStudentDisciplinarySanctionsRelatedByResponsibleId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collStudentDisciplinarySanctionsRelatedByResponsibleId.
	 */
	private $lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria = null;

	/**
	 * @var        array Personal[] Collection to store aggregation of Personal objects.
	 */
	protected $collPersonals;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPersonals.
	 */
	private $lastPersonalCriteria = null;

	/**
	 * @var        array Student[] Collection to store aggregation of Student objects.
	 */
	protected $collStudents;

	/**
	 * @var        Criteria The criteria used to select the current contents of collStudents.
	 */
	private $lastStudentCriteria = null;

	/**
	 * @var        array Teacher[] Collection to store aggregation of Teacher objects.
	 */
	protected $collTeachers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTeachers.
	 */
	private $lastTeacherCriteria = null;

	/**
	 * @var        array Tutor[] Collection to store aggregation of Tutor objects.
	 */
	protected $collTutors;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTutors.
	 */
	private $lastTutorCriteria = null;

	/**
	 * @var        array License[] Collection to store aggregation of License objects.
	 */
	protected $collLicenses;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLicenses.
	 */
	private $lastLicenseCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BasePerson object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->is_active = true;
		$this->civil_status = 0;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [lastname] column value.
	 * 
	 * @return     string
	 */
	public function getLastname()
	{
		return $this->lastname;
	}

	/**
	 * Get the [firstname] column value.
	 * 
	 * @return     string
	 */
	public function getFirstname()
	{
		return $this->firstname;
	}

	/**
	 * Get the [identification_type] column value.
	 * 
	 * @return     int
	 */
	public function getIdentificationType()
	{
		return $this->identification_type;
	}

	/**
	 * Get the [identification_number] column value.
	 * 
	 * @return     string
	 */
	public function getIdentificationNumber()
	{
		return $this->identification_number;
	}

	/**
	 * Get the [sex] column value.
	 * 
	 * @return     int
	 */
	public function getSex()
	{
		return $this->sex;
	}

	/**
	 * Get the [cuil] column value.
	 * 
	 * @return     string
	 */
	public function getCuil()
	{
		return $this->cuil;
	}

	/**
	 * Get the [is_active] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsActive()
	{
		return $this->is_active;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [phone] column value.
	 * 
	 * @return     string
	 */
	public function getPhone()
	{
		return $this->phone;
	}

	/**
	 * Get the [optionally formatted] temporal [birthdate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getBirthdate($format = 'Y-m-d')
	{
		if ($this->birthdate === null) {
			return null;
		}


		if ($this->birthdate === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->birthdate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->birthdate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [birth_country] column value.
	 * 
	 * @return     string
	 */
	public function getBirthCountry()
	{
		return $this->birth_country;
	}

	/**
	 * Get the [birth_state] column value.
	 * 
	 * @return     string
	 */
	public function getBirthState()
	{
		return $this->birth_state;
	}

	/**
	 * Get the [birth_city] column value.
	 * 
	 * @return     string
	 */
	public function getBirthCity()
	{
		return $this->birth_city;
	}

	/**
	 * Get the [observations] column value.
	 * 
	 * @return     string
	 */
	public function getObservations()
	{
		return $this->observations;
	}

	/**
	 * Get the [civil_status] column value.
	 * Representa el estado civil de la persona (Soltero-Casado-Viudo-Divorciado)
	 * @return     int
	 */
	public function getCivilStatus()
	{
		return $this->civil_status;
	}

	/**
	 * Get the [address_id] column value.
	 * 
	 * @return     int
	 */
	public function getAddressId()
	{
		return $this->address_id;
	}

	/**
	 * Get the [user_id] column value.
	 * Si se crea un usuario para la persona, este id representarÃ¡ el sf_guard_user_id
	 * @return     int
	 */
	public function getUserId()
	{
		return $this->user_id;
	}

	/**
	 * Get the [photo] column value.
	 * 
	 * @return     string
	 */
	public function getPhoto()
	{
		return $this->photo;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PersonPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [lastname] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setLastname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lastname !== $v) {
			$this->lastname = $v;
			$this->modifiedColumns[] = PersonPeer::LASTNAME;
		}

		return $this;
	} // setLastname()

	/**
	 * Set the value of [firstname] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setFirstname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->firstname !== $v) {
			$this->firstname = $v;
			$this->modifiedColumns[] = PersonPeer::FIRSTNAME;
		}

		return $this;
	} // setFirstname()

	/**
	 * Set the value of [identification_type] column.
	 * 
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setIdentificationType($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->identification_type !== $v) {
			$this->identification_type = $v;
			$this->modifiedColumns[] = PersonPeer::IDENTIFICATION_TYPE;
		}

		return $this;
	} // setIdentificationType()

	/**
	 * Set the value of [identification_number] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setIdentificationNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->identification_number !== $v) {
			$this->identification_number = $v;
			$this->modifiedColumns[] = PersonPeer::IDENTIFICATION_NUMBER;
		}

		return $this;
	} // setIdentificationNumber()

	/**
	 * Set the value of [sex] column.
	 * 
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setSex($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->sex !== $v) {
			$this->sex = $v;
			$this->modifiedColumns[] = PersonPeer::SEX;
		}

		return $this;
	} // setSex()

	/**
	 * Set the value of [cuil] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setCuil($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cuil !== $v) {
			$this->cuil = $v;
			$this->modifiedColumns[] = PersonPeer::CUIL;
		}

		return $this;
	} // setCuil()

	/**
	 * Set the value of [is_active] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setIsActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_active !== $v || $v === true) {
			$this->is_active = $v;
			$this->modifiedColumns[] = PersonPeer::IS_ACTIVE;
		}

		return $this;
	} // setIsActive()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = PersonPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->phone !== $v) {
			$this->phone = $v;
			$this->modifiedColumns[] = PersonPeer::PHONE;
		}

		return $this;
	} // setPhone()

	/**
	 * Sets the value of [birthdate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Person The current object (for fluent API support)
	 */
	public function setBirthdate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->birthdate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->birthdate !== null && $tmpDt = new DateTime($this->birthdate)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->birthdate = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = PersonPeer::BIRTHDATE;
			}
		} // if either are not null

		return $this;
	} // setBirthdate()

	/**
	 * Set the value of [birth_country] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setBirthCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->birth_country !== $v) {
			$this->birth_country = $v;
			$this->modifiedColumns[] = PersonPeer::BIRTH_COUNTRY;
		}

		return $this;
	} // setBirthCountry()

	/**
	 * Set the value of [birth_state] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setBirthState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->birth_state !== $v) {
			$this->birth_state = $v;
			$this->modifiedColumns[] = PersonPeer::BIRTH_STATE;
		}

		return $this;
	} // setBirthState()

	/**
	 * Set the value of [birth_city] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setBirthCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->birth_city !== $v) {
			$this->birth_city = $v;
			$this->modifiedColumns[] = PersonPeer::BIRTH_CITY;
		}

		return $this;
	} // setBirthCity()

	/**
	 * Set the value of [observations] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setObservations($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->observations !== $v) {
			$this->observations = $v;
			$this->modifiedColumns[] = PersonPeer::OBSERVATIONS;
		}

		return $this;
	} // setObservations()

	/**
	 * Set the value of [civil_status] column.
	 * Representa el estado civil de la persona (Soltero-Casado-Viudo-Divorciado)
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setCivilStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->civil_status !== $v || $v === 0) {
			$this->civil_status = $v;
			$this->modifiedColumns[] = PersonPeer::CIVIL_STATUS;
		}

		return $this;
	} // setCivilStatus()

	/**
	 * Set the value of [address_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setAddressId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->address_id !== $v) {
			$this->address_id = $v;
			$this->modifiedColumns[] = PersonPeer::ADDRESS_ID;
		}

		if ($this->aAddress !== null && $this->aAddress->getId() !== $v) {
			$this->aAddress = null;
		}

		return $this;
	} // setAddressId()

	/**
	 * Set the value of [user_id] column.
	 * Si se crea un usuario para la persona, este id representarÃ¡ el sf_guard_user_id
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setUserId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_id !== $v) {
			$this->user_id = $v;
			$this->modifiedColumns[] = PersonPeer::USER_ID;
		}

		if ($this->asfGuardUser !== null && $this->asfGuardUser->getId() !== $v) {
			$this->asfGuardUser = null;
		}

		return $this;
	} // setUserId()

	/**
	 * Set the value of [photo] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setPhoto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->photo !== $v) {
			$this->photo = $v;
			$this->modifiedColumns[] = PersonPeer::PHOTO;
		}

		return $this;
	} // setPhoto()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(PersonPeer::IS_ACTIVE,PersonPeer::CIVIL_STATUS))) {
				return false;
			}

			if ($this->is_active !== true) {
				return false;
			}

			if ($this->civil_status !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->lastname = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->firstname = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->identification_type = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->identification_number = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->sex = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->cuil = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->is_active = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
			$this->email = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->phone = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->birthdate = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->birth_country = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->birth_state = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->birth_city = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->observations = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->civil_status = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->address_id = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->user_id = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->photo = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 19; // 19 = PersonPeer::NUM_COLUMNS - PersonPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Person object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aAddress !== null && $this->address_id !== $this->aAddress->getId()) {
			$this->aAddress = null;
		}
		if ($this->asfGuardUser !== null && $this->user_id !== $this->asfGuardUser->getId()) {
			$this->asfGuardUser = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PersonPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PersonPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aAddress = null;
			$this->asfGuardUser = null;
			$this->collStudentDisciplinarySanctionsRelatedByApplicantId = null;
			$this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria = null;

			$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = null;
			$this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria = null;

			$this->collPersonals = null;
			$this->lastPersonalCriteria = null;

			$this->collStudents = null;
			$this->lastStudentCriteria = null;

			$this->collTeachers = null;
			$this->lastTeacherCriteria = null;

			$this->collTutors = null;
			$this->lastTutorCriteria = null;

			$this->collLicenses = null;
			$this->lastLicenseCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePerson:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PersonPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			PersonPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BasePerson:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePerson:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PersonPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BasePerson:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			PersonPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAddress !== null) {
				if ($this->aAddress->isModified() || $this->aAddress->isNew()) {
					$affectedRows += $this->aAddress->save($con);
				}
				$this->setAddress($this->aAddress);
			}

			if ($this->asfGuardUser !== null) {
				if ($this->asfGuardUser->isModified() || $this->asfGuardUser->isNew()) {
					$affectedRows += $this->asfGuardUser->save($con);
				}
				$this->setsfGuardUser($this->asfGuardUser);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PersonPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PersonPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PersonPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collStudentDisciplinarySanctionsRelatedByApplicantId !== null) {
				foreach ($this->collStudentDisciplinarySanctionsRelatedByApplicantId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collStudentDisciplinarySanctionsRelatedByResponsibleId !== null) {
				foreach ($this->collStudentDisciplinarySanctionsRelatedByResponsibleId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPersonals !== null) {
				foreach ($this->collPersonals as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collStudents !== null) {
				foreach ($this->collStudents as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTeachers !== null) {
				foreach ($this->collTeachers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTutors !== null) {
				foreach ($this->collTutors as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLicenses !== null) {
				foreach ($this->collLicenses as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAddress !== null) {
				if (!$this->aAddress->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAddress->getValidationFailures());
				}
			}

			if ($this->asfGuardUser !== null) {
				if (!$this->asfGuardUser->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->asfGuardUser->getValidationFailures());
				}
			}


			if (($retval = PersonPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collStudentDisciplinarySanctionsRelatedByApplicantId !== null) {
					foreach ($this->collStudentDisciplinarySanctionsRelatedByApplicantId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collStudentDisciplinarySanctionsRelatedByResponsibleId !== null) {
					foreach ($this->collStudentDisciplinarySanctionsRelatedByResponsibleId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPersonals !== null) {
					foreach ($this->collPersonals as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collStudents !== null) {
					foreach ($this->collStudents as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTeachers !== null) {
					foreach ($this->collTeachers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTutors !== null) {
					foreach ($this->collTutors as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLicenses !== null) {
					foreach ($this->collLicenses as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PersonPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getLastname();
				break;
			case 2:
				return $this->getFirstname();
				break;
			case 3:
				return $this->getIdentificationType();
				break;
			case 4:
				return $this->getIdentificationNumber();
				break;
			case 5:
				return $this->getSex();
				break;
			case 6:
				return $this->getCuil();
				break;
			case 7:
				return $this->getIsActive();
				break;
			case 8:
				return $this->getEmail();
				break;
			case 9:
				return $this->getPhone();
				break;
			case 10:
				return $this->getBirthdate();
				break;
			case 11:
				return $this->getBirthCountry();
				break;
			case 12:
				return $this->getBirthState();
				break;
			case 13:
				return $this->getBirthCity();
				break;
			case 14:
				return $this->getObservations();
				break;
			case 15:
				return $this->getCivilStatus();
				break;
			case 16:
				return $this->getAddressId();
				break;
			case 17:
				return $this->getUserId();
				break;
			case 18:
				return $this->getPhoto();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PersonPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getLastname(),
			$keys[2] => $this->getFirstname(),
			$keys[3] => $this->getIdentificationType(),
			$keys[4] => $this->getIdentificationNumber(),
			$keys[5] => $this->getSex(),
			$keys[6] => $this->getCuil(),
			$keys[7] => $this->getIsActive(),
			$keys[8] => $this->getEmail(),
			$keys[9] => $this->getPhone(),
			$keys[10] => $this->getBirthdate(),
			$keys[11] => $this->getBirthCountry(),
			$keys[12] => $this->getBirthState(),
			$keys[13] => $this->getBirthCity(),
			$keys[14] => $this->getObservations(),
			$keys[15] => $this->getCivilStatus(),
			$keys[16] => $this->getAddressId(),
			$keys[17] => $this->getUserId(),
			$keys[18] => $this->getPhoto(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PersonPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setLastname($value);
				break;
			case 2:
				$this->setFirstname($value);
				break;
			case 3:
				$this->setIdentificationType($value);
				break;
			case 4:
				$this->setIdentificationNumber($value);
				break;
			case 5:
				$this->setSex($value);
				break;
			case 6:
				$this->setCuil($value);
				break;
			case 7:
				$this->setIsActive($value);
				break;
			case 8:
				$this->setEmail($value);
				break;
			case 9:
				$this->setPhone($value);
				break;
			case 10:
				$this->setBirthdate($value);
				break;
			case 11:
				$this->setBirthCountry($value);
				break;
			case 12:
				$this->setBirthState($value);
				break;
			case 13:
				$this->setBirthCity($value);
				break;
			case 14:
				$this->setObservations($value);
				break;
			case 15:
				$this->setCivilStatus($value);
				break;
			case 16:
				$this->setAddressId($value);
				break;
			case 17:
				$this->setUserId($value);
				break;
			case 18:
				$this->setPhoto($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PersonPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setLastname($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setFirstname($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setIdentificationType($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setIdentificationNumber($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setSex($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCuil($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIsActive($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setEmail($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPhone($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setBirthdate($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setBirthCountry($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setBirthState($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setBirthCity($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setObservations($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCivilStatus($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setAddressId($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setUserId($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setPhoto($arr[$keys[18]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PersonPeer::DATABASE_NAME);

		if ($this->isColumnModified(PersonPeer::ID)) $criteria->add(PersonPeer::ID, $this->id);
		if ($this->isColumnModified(PersonPeer::LASTNAME)) $criteria->add(PersonPeer::LASTNAME, $this->lastname);
		if ($this->isColumnModified(PersonPeer::FIRSTNAME)) $criteria->add(PersonPeer::FIRSTNAME, $this->firstname);
		if ($this->isColumnModified(PersonPeer::IDENTIFICATION_TYPE)) $criteria->add(PersonPeer::IDENTIFICATION_TYPE, $this->identification_type);
		if ($this->isColumnModified(PersonPeer::IDENTIFICATION_NUMBER)) $criteria->add(PersonPeer::IDENTIFICATION_NUMBER, $this->identification_number);
		if ($this->isColumnModified(PersonPeer::SEX)) $criteria->add(PersonPeer::SEX, $this->sex);
		if ($this->isColumnModified(PersonPeer::CUIL)) $criteria->add(PersonPeer::CUIL, $this->cuil);
		if ($this->isColumnModified(PersonPeer::IS_ACTIVE)) $criteria->add(PersonPeer::IS_ACTIVE, $this->is_active);
		if ($this->isColumnModified(PersonPeer::EMAIL)) $criteria->add(PersonPeer::EMAIL, $this->email);
		if ($this->isColumnModified(PersonPeer::PHONE)) $criteria->add(PersonPeer::PHONE, $this->phone);
		if ($this->isColumnModified(PersonPeer::BIRTHDATE)) $criteria->add(PersonPeer::BIRTHDATE, $this->birthdate);
		if ($this->isColumnModified(PersonPeer::BIRTH_COUNTRY)) $criteria->add(PersonPeer::BIRTH_COUNTRY, $this->birth_country);
		if ($this->isColumnModified(PersonPeer::BIRTH_STATE)) $criteria->add(PersonPeer::BIRTH_STATE, $this->birth_state);
		if ($this->isColumnModified(PersonPeer::BIRTH_CITY)) $criteria->add(PersonPeer::BIRTH_CITY, $this->birth_city);
		if ($this->isColumnModified(PersonPeer::OBSERVATIONS)) $criteria->add(PersonPeer::OBSERVATIONS, $this->observations);
		if ($this->isColumnModified(PersonPeer::CIVIL_STATUS)) $criteria->add(PersonPeer::CIVIL_STATUS, $this->civil_status);
		if ($this->isColumnModified(PersonPeer::ADDRESS_ID)) $criteria->add(PersonPeer::ADDRESS_ID, $this->address_id);
		if ($this->isColumnModified(PersonPeer::USER_ID)) $criteria->add(PersonPeer::USER_ID, $this->user_id);
		if ($this->isColumnModified(PersonPeer::PHOTO)) $criteria->add(PersonPeer::PHOTO, $this->photo);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PersonPeer::DATABASE_NAME);

		$criteria->add(PersonPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Person (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setLastname($this->lastname);

		$copyObj->setFirstname($this->firstname);

		$copyObj->setIdentificationType($this->identification_type);

		$copyObj->setIdentificationNumber($this->identification_number);

		$copyObj->setSex($this->sex);

		$copyObj->setCuil($this->cuil);

		$copyObj->setIsActive($this->is_active);

		$copyObj->setEmail($this->email);

		$copyObj->setPhone($this->phone);

		$copyObj->setBirthdate($this->birthdate);

		$copyObj->setBirthCountry($this->birth_country);

		$copyObj->setBirthState($this->birth_state);

		$copyObj->setBirthCity($this->birth_city);

		$copyObj->setObservations($this->observations);

		$copyObj->setCivilStatus($this->civil_status);

		$copyObj->setAddressId($this->address_id);

		$copyObj->setUserId($this->user_id);

		$copyObj->setPhoto($this->photo);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getStudentDisciplinarySanctionsRelatedByApplicantId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addStudentDisciplinarySanctionRelatedByApplicantId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getStudentDisciplinarySanctionsRelatedByResponsibleId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addStudentDisciplinarySanctionRelatedByResponsibleId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPersonals() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPersonal($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getStudents() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addStudent($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTeachers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTeacher($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTutors() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTutor($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLicenses() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLicense($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Person Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PersonPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PersonPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Address object.
	 *
	 * @param      Address $v
	 * @return     Person The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAddress(Address $v = null)
	{
		if ($v === null) {
			$this->setAddressId(NULL);
		} else {
			$this->setAddressId($v->getId());
		}

		$this->aAddress = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Address object, it will not be re-added.
		if ($v !== null) {
			$v->addPerson($this);
		}

		return $this;
	}


	/**
	 * Get the associated Address object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Address The associated Address object.
	 * @throws     PropelException
	 */
	public function getAddress(PropelPDO $con = null)
	{
		if ($this->aAddress === null && ($this->address_id !== null)) {
			$c = new Criteria(AddressPeer::DATABASE_NAME);
			$c->add(AddressPeer::ID, $this->address_id);
			$this->aAddress = AddressPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAddress->addPersons($this);
			 */
		}
		return $this->aAddress;
	}

	/**
	 * Declares an association between this object and a sfGuardUser object.
	 *
	 * @param      sfGuardUser $v
	 * @return     Person The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setsfGuardUser(sfGuardUser $v = null)
	{
		if ($v === null) {
			$this->setUserId(NULL);
		} else {
			$this->setUserId($v->getId());
		}

		$this->asfGuardUser = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the sfGuardUser object, it will not be re-added.
		if ($v !== null) {
			$v->addPerson($this);
		}

		return $this;
	}


	/**
	 * Get the associated sfGuardUser object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     sfGuardUser The associated sfGuardUser object.
	 * @throws     PropelException
	 */
	public function getsfGuardUser(PropelPDO $con = null)
	{
		if ($this->asfGuardUser === null && ($this->user_id !== null)) {
			$c = new Criteria(sfGuardUserPeer::DATABASE_NAME);
			$c->add(sfGuardUserPeer::ID, $this->user_id);
			$this->asfGuardUser = sfGuardUserPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->asfGuardUser->addPersons($this);
			 */
		}
		return $this->asfGuardUser;
	}

	/**
	 * Clears out the collStudentDisciplinarySanctionsRelatedByApplicantId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addStudentDisciplinarySanctionsRelatedByApplicantId()
	 */
	public function clearStudentDisciplinarySanctionsRelatedByApplicantId()
	{
		$this->collStudentDisciplinarySanctionsRelatedByApplicantId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collStudentDisciplinarySanctionsRelatedByApplicantId collection (array).
	 *
	 * By default this just sets the collStudentDisciplinarySanctionsRelatedByApplicantId collection to an empty array (like clearcollStudentDisciplinarySanctionsRelatedByApplicantId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initStudentDisciplinarySanctionsRelatedByApplicantId()
	{
		$this->collStudentDisciplinarySanctionsRelatedByApplicantId = array();
	}

	/**
	 * Gets an array of StudentDisciplinarySanction objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related StudentDisciplinarySanctionsRelatedByApplicantId from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array StudentDisciplinarySanction[]
	 * @throws     PropelException
	 */
	public function getStudentDisciplinarySanctionsRelatedByApplicantId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctionsRelatedByApplicantId === null) {
			if ($this->isNew()) {
			   $this->collStudentDisciplinarySanctionsRelatedByApplicantId = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::APPLICANT_ID, $this->id);

				StudentDisciplinarySanctionPeer::addSelectColumns($criteria);
				$this->collStudentDisciplinarySanctionsRelatedByApplicantId = StudentDisciplinarySanctionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(StudentDisciplinarySanctionPeer::APPLICANT_ID, $this->id);

				StudentDisciplinarySanctionPeer::addSelectColumns($criteria);
				if (!isset($this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria) || !$this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria->equals($criteria)) {
					$this->collStudentDisciplinarySanctionsRelatedByApplicantId = StudentDisciplinarySanctionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria = $criteria;
		return $this->collStudentDisciplinarySanctionsRelatedByApplicantId;
	}

	/**
	 * Returns the number of related StudentDisciplinarySanction objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related StudentDisciplinarySanction objects.
	 * @throws     PropelException
	 */
	public function countStudentDisciplinarySanctionsRelatedByApplicantId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collStudentDisciplinarySanctionsRelatedByApplicantId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::APPLICANT_ID, $this->id);

				$count = StudentDisciplinarySanctionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(StudentDisciplinarySanctionPeer::APPLICANT_ID, $this->id);

				if (!isset($this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria) || !$this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria->equals($criteria)) {
					$count = StudentDisciplinarySanctionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collStudentDisciplinarySanctionsRelatedByApplicantId);
				}
			} else {
				$count = count($this->collStudentDisciplinarySanctionsRelatedByApplicantId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a StudentDisciplinarySanction object to this object
	 * through the StudentDisciplinarySanction foreign key attribute.
	 *
	 * @param      StudentDisciplinarySanction $l StudentDisciplinarySanction
	 * @return     void
	 * @throws     PropelException
	 */
	public function addStudentDisciplinarySanctionRelatedByApplicantId(StudentDisciplinarySanction $l)
	{
		if ($this->collStudentDisciplinarySanctionsRelatedByApplicantId === null) {
			$this->initStudentDisciplinarySanctionsRelatedByApplicantId();
		}
		if (!in_array($l, $this->collStudentDisciplinarySanctionsRelatedByApplicantId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collStudentDisciplinarySanctionsRelatedByApplicantId, $l);
			$l->setPersonRelatedByApplicantId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related StudentDisciplinarySanctionsRelatedByApplicantId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getStudentDisciplinarySanctionsRelatedByApplicantIdJoinStudent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctionsRelatedByApplicantId === null) {
			if ($this->isNew()) {
				$this->collStudentDisciplinarySanctionsRelatedByApplicantId = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::APPLICANT_ID, $this->id);

				$this->collStudentDisciplinarySanctionsRelatedByApplicantId = StudentDisciplinarySanctionPeer::doSelectJoinStudent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentDisciplinarySanctionPeer::APPLICANT_ID, $this->id);

			if (!isset($this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria) || !$this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria->equals($criteria)) {
				$this->collStudentDisciplinarySanctionsRelatedByApplicantId = StudentDisciplinarySanctionPeer::doSelectJoinStudent($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria = $criteria;

		return $this->collStudentDisciplinarySanctionsRelatedByApplicantId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related StudentDisciplinarySanctionsRelatedByApplicantId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getStudentDisciplinarySanctionsRelatedByApplicantIdJoinDisciplinarySanctionType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctionsRelatedByApplicantId === null) {
			if ($this->isNew()) {
				$this->collStudentDisciplinarySanctionsRelatedByApplicantId = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::APPLICANT_ID, $this->id);

				$this->collStudentDisciplinarySanctionsRelatedByApplicantId = StudentDisciplinarySanctionPeer::doSelectJoinDisciplinarySanctionType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentDisciplinarySanctionPeer::APPLICANT_ID, $this->id);

			if (!isset($this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria) || !$this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria->equals($criteria)) {
				$this->collStudentDisciplinarySanctionsRelatedByApplicantId = StudentDisciplinarySanctionPeer::doSelectJoinDisciplinarySanctionType($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria = $criteria;

		return $this->collStudentDisciplinarySanctionsRelatedByApplicantId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related StudentDisciplinarySanctionsRelatedByApplicantId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getStudentDisciplinarySanctionsRelatedByApplicantIdJoinSanctionType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctionsRelatedByApplicantId === null) {
			if ($this->isNew()) {
				$this->collStudentDisciplinarySanctionsRelatedByApplicantId = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::APPLICANT_ID, $this->id);

				$this->collStudentDisciplinarySanctionsRelatedByApplicantId = StudentDisciplinarySanctionPeer::doSelectJoinSanctionType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentDisciplinarySanctionPeer::APPLICANT_ID, $this->id);

			if (!isset($this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria) || !$this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria->equals($criteria)) {
				$this->collStudentDisciplinarySanctionsRelatedByApplicantId = StudentDisciplinarySanctionPeer::doSelectJoinSanctionType($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria = $criteria;

		return $this->collStudentDisciplinarySanctionsRelatedByApplicantId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related StudentDisciplinarySanctionsRelatedByApplicantId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getStudentDisciplinarySanctionsRelatedByApplicantIdJoinSchoolYear($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctionsRelatedByApplicantId === null) {
			if ($this->isNew()) {
				$this->collStudentDisciplinarySanctionsRelatedByApplicantId = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::APPLICANT_ID, $this->id);

				$this->collStudentDisciplinarySanctionsRelatedByApplicantId = StudentDisciplinarySanctionPeer::doSelectJoinSchoolYear($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentDisciplinarySanctionPeer::APPLICANT_ID, $this->id);

			if (!isset($this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria) || !$this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria->equals($criteria)) {
				$this->collStudentDisciplinarySanctionsRelatedByApplicantId = StudentDisciplinarySanctionPeer::doSelectJoinSchoolYear($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentDisciplinarySanctionRelatedByApplicantIdCriteria = $criteria;

		return $this->collStudentDisciplinarySanctionsRelatedByApplicantId;
	}

	/**
	 * Clears out the collStudentDisciplinarySanctionsRelatedByResponsibleId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addStudentDisciplinarySanctionsRelatedByResponsibleId()
	 */
	public function clearStudentDisciplinarySanctionsRelatedByResponsibleId()
	{
		$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collStudentDisciplinarySanctionsRelatedByResponsibleId collection (array).
	 *
	 * By default this just sets the collStudentDisciplinarySanctionsRelatedByResponsibleId collection to an empty array (like clearcollStudentDisciplinarySanctionsRelatedByResponsibleId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initStudentDisciplinarySanctionsRelatedByResponsibleId()
	{
		$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = array();
	}

	/**
	 * Gets an array of StudentDisciplinarySanction objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related StudentDisciplinarySanctionsRelatedByResponsibleId from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array StudentDisciplinarySanction[]
	 * @throws     PropelException
	 */
	public function getStudentDisciplinarySanctionsRelatedByResponsibleId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctionsRelatedByResponsibleId === null) {
			if ($this->isNew()) {
			   $this->collStudentDisciplinarySanctionsRelatedByResponsibleId = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::RESPONSIBLE_ID, $this->id);

				StudentDisciplinarySanctionPeer::addSelectColumns($criteria);
				$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = StudentDisciplinarySanctionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(StudentDisciplinarySanctionPeer::RESPONSIBLE_ID, $this->id);

				StudentDisciplinarySanctionPeer::addSelectColumns($criteria);
				if (!isset($this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria) || !$this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria->equals($criteria)) {
					$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = StudentDisciplinarySanctionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria = $criteria;
		return $this->collStudentDisciplinarySanctionsRelatedByResponsibleId;
	}

	/**
	 * Returns the number of related StudentDisciplinarySanction objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related StudentDisciplinarySanction objects.
	 * @throws     PropelException
	 */
	public function countStudentDisciplinarySanctionsRelatedByResponsibleId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collStudentDisciplinarySanctionsRelatedByResponsibleId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::RESPONSIBLE_ID, $this->id);

				$count = StudentDisciplinarySanctionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(StudentDisciplinarySanctionPeer::RESPONSIBLE_ID, $this->id);

				if (!isset($this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria) || !$this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria->equals($criteria)) {
					$count = StudentDisciplinarySanctionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collStudentDisciplinarySanctionsRelatedByResponsibleId);
				}
			} else {
				$count = count($this->collStudentDisciplinarySanctionsRelatedByResponsibleId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a StudentDisciplinarySanction object to this object
	 * through the StudentDisciplinarySanction foreign key attribute.
	 *
	 * @param      StudentDisciplinarySanction $l StudentDisciplinarySanction
	 * @return     void
	 * @throws     PropelException
	 */
	public function addStudentDisciplinarySanctionRelatedByResponsibleId(StudentDisciplinarySanction $l)
	{
		if ($this->collStudentDisciplinarySanctionsRelatedByResponsibleId === null) {
			$this->initStudentDisciplinarySanctionsRelatedByResponsibleId();
		}
		if (!in_array($l, $this->collStudentDisciplinarySanctionsRelatedByResponsibleId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collStudentDisciplinarySanctionsRelatedByResponsibleId, $l);
			$l->setPersonRelatedByResponsibleId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related StudentDisciplinarySanctionsRelatedByResponsibleId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getStudentDisciplinarySanctionsRelatedByResponsibleIdJoinStudent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctionsRelatedByResponsibleId === null) {
			if ($this->isNew()) {
				$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::RESPONSIBLE_ID, $this->id);

				$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = StudentDisciplinarySanctionPeer::doSelectJoinStudent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentDisciplinarySanctionPeer::RESPONSIBLE_ID, $this->id);

			if (!isset($this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria) || !$this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria->equals($criteria)) {
				$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = StudentDisciplinarySanctionPeer::doSelectJoinStudent($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria = $criteria;

		return $this->collStudentDisciplinarySanctionsRelatedByResponsibleId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related StudentDisciplinarySanctionsRelatedByResponsibleId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getStudentDisciplinarySanctionsRelatedByResponsibleIdJoinDisciplinarySanctionType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctionsRelatedByResponsibleId === null) {
			if ($this->isNew()) {
				$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::RESPONSIBLE_ID, $this->id);

				$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = StudentDisciplinarySanctionPeer::doSelectJoinDisciplinarySanctionType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentDisciplinarySanctionPeer::RESPONSIBLE_ID, $this->id);

			if (!isset($this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria) || !$this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria->equals($criteria)) {
				$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = StudentDisciplinarySanctionPeer::doSelectJoinDisciplinarySanctionType($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria = $criteria;

		return $this->collStudentDisciplinarySanctionsRelatedByResponsibleId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related StudentDisciplinarySanctionsRelatedByResponsibleId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getStudentDisciplinarySanctionsRelatedByResponsibleIdJoinSanctionType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctionsRelatedByResponsibleId === null) {
			if ($this->isNew()) {
				$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::RESPONSIBLE_ID, $this->id);

				$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = StudentDisciplinarySanctionPeer::doSelectJoinSanctionType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentDisciplinarySanctionPeer::RESPONSIBLE_ID, $this->id);

			if (!isset($this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria) || !$this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria->equals($criteria)) {
				$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = StudentDisciplinarySanctionPeer::doSelectJoinSanctionType($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria = $criteria;

		return $this->collStudentDisciplinarySanctionsRelatedByResponsibleId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related StudentDisciplinarySanctionsRelatedByResponsibleId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getStudentDisciplinarySanctionsRelatedByResponsibleIdJoinSchoolYear($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctionsRelatedByResponsibleId === null) {
			if ($this->isNew()) {
				$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::RESPONSIBLE_ID, $this->id);

				$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = StudentDisciplinarySanctionPeer::doSelectJoinSchoolYear($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentDisciplinarySanctionPeer::RESPONSIBLE_ID, $this->id);

			if (!isset($this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria) || !$this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria->equals($criteria)) {
				$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = StudentDisciplinarySanctionPeer::doSelectJoinSchoolYear($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentDisciplinarySanctionRelatedByResponsibleIdCriteria = $criteria;

		return $this->collStudentDisciplinarySanctionsRelatedByResponsibleId;
	}

	/**
	 * Clears out the collPersonals collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPersonals()
	 */
	public function clearPersonals()
	{
		$this->collPersonals = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPersonals collection (array).
	 *
	 * By default this just sets the collPersonals collection to an empty array (like clearcollPersonals());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPersonals()
	{
		$this->collPersonals = array();
	}

	/**
	 * Gets an array of Personal objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related Personals from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Personal[]
	 * @throws     PropelException
	 */
	public function getPersonals($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonals === null) {
			if ($this->isNew()) {
			   $this->collPersonals = array();
			} else {

				$criteria->add(PersonalPeer::PERSON_ID, $this->id);

				PersonalPeer::addSelectColumns($criteria);
				$this->collPersonals = PersonalPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PersonalPeer::PERSON_ID, $this->id);

				PersonalPeer::addSelectColumns($criteria);
				if (!isset($this->lastPersonalCriteria) || !$this->lastPersonalCriteria->equals($criteria)) {
					$this->collPersonals = PersonalPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPersonalCriteria = $criteria;
		return $this->collPersonals;
	}

	/**
	 * Returns the number of related Personal objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Personal objects.
	 * @throws     PropelException
	 */
	public function countPersonals(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPersonals === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PersonalPeer::PERSON_ID, $this->id);

				$count = PersonalPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PersonalPeer::PERSON_ID, $this->id);

				if (!isset($this->lastPersonalCriteria) || !$this->lastPersonalCriteria->equals($criteria)) {
					$count = PersonalPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPersonals);
				}
			} else {
				$count = count($this->collPersonals);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Personal object to this object
	 * through the Personal foreign key attribute.
	 *
	 * @param      Personal $l Personal
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPersonal(Personal $l)
	{
		if ($this->collPersonals === null) {
			$this->initPersonals();
		}
		if (!in_array($l, $this->collPersonals, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPersonals, $l);
			$l->setPerson($this);
		}
	}

	/**
	 * Clears out the collStudents collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addStudents()
	 */
	public function clearStudents()
	{
		$this->collStudents = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collStudents collection (array).
	 *
	 * By default this just sets the collStudents collection to an empty array (like clearcollStudents());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initStudents()
	{
		$this->collStudents = array();
	}

	/**
	 * Gets an array of Student objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related Students from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Student[]
	 * @throws     PropelException
	 */
	public function getStudents($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudents === null) {
			if ($this->isNew()) {
			   $this->collStudents = array();
			} else {

				$criteria->add(StudentPeer::PERSON_ID, $this->id);

				StudentPeer::addSelectColumns($criteria);
				$this->collStudents = StudentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(StudentPeer::PERSON_ID, $this->id);

				StudentPeer::addSelectColumns($criteria);
				if (!isset($this->lastStudentCriteria) || !$this->lastStudentCriteria->equals($criteria)) {
					$this->collStudents = StudentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastStudentCriteria = $criteria;
		return $this->collStudents;
	}

	/**
	 * Returns the number of related Student objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Student objects.
	 * @throws     PropelException
	 */
	public function countStudents(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collStudents === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(StudentPeer::PERSON_ID, $this->id);

				$count = StudentPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(StudentPeer::PERSON_ID, $this->id);

				if (!isset($this->lastStudentCriteria) || !$this->lastStudentCriteria->equals($criteria)) {
					$count = StudentPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collStudents);
				}
			} else {
				$count = count($this->collStudents);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Student object to this object
	 * through the Student foreign key attribute.
	 *
	 * @param      Student $l Student
	 * @return     void
	 * @throws     PropelException
	 */
	public function addStudent(Student $l)
	{
		if ($this->collStudents === null) {
			$this->initStudents();
		}
		if (!in_array($l, $this->collStudents, true)) { // only add it if the **same** object is not already associated
			array_push($this->collStudents, $l);
			$l->setPerson($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Students from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getStudentsJoinOccupation($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudents === null) {
			if ($this->isNew()) {
				$this->collStudents = array();
			} else {

				$criteria->add(StudentPeer::PERSON_ID, $this->id);

				$this->collStudents = StudentPeer::doSelectJoinOccupation($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentPeer::PERSON_ID, $this->id);

			if (!isset($this->lastStudentCriteria) || !$this->lastStudentCriteria->equals($criteria)) {
				$this->collStudents = StudentPeer::doSelectJoinOccupation($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentCriteria = $criteria;

		return $this->collStudents;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Students from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getStudentsJoinHealthCoverage($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudents === null) {
			if ($this->isNew()) {
				$this->collStudents = array();
			} else {

				$criteria->add(StudentPeer::PERSON_ID, $this->id);

				$this->collStudents = StudentPeer::doSelectJoinHealthCoverage($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentPeer::PERSON_ID, $this->id);

			if (!isset($this->lastStudentCriteria) || !$this->lastStudentCriteria->equals($criteria)) {
				$this->collStudents = StudentPeer::doSelectJoinHealthCoverage($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentCriteria = $criteria;

		return $this->collStudents;
	}

	/**
	 * Clears out the collTeachers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTeachers()
	 */
	public function clearTeachers()
	{
		$this->collTeachers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTeachers collection (array).
	 *
	 * By default this just sets the collTeachers collection to an empty array (like clearcollTeachers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTeachers()
	{
		$this->collTeachers = array();
	}

	/**
	 * Gets an array of Teacher objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related Teachers from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Teacher[]
	 * @throws     PropelException
	 */
	public function getTeachers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTeachers === null) {
			if ($this->isNew()) {
			   $this->collTeachers = array();
			} else {

				$criteria->add(TeacherPeer::PERSON_ID, $this->id);

				TeacherPeer::addSelectColumns($criteria);
				$this->collTeachers = TeacherPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TeacherPeer::PERSON_ID, $this->id);

				TeacherPeer::addSelectColumns($criteria);
				if (!isset($this->lastTeacherCriteria) || !$this->lastTeacherCriteria->equals($criteria)) {
					$this->collTeachers = TeacherPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTeacherCriteria = $criteria;
		return $this->collTeachers;
	}

	/**
	 * Returns the number of related Teacher objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Teacher objects.
	 * @throws     PropelException
	 */
	public function countTeachers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTeachers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TeacherPeer::PERSON_ID, $this->id);

				$count = TeacherPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TeacherPeer::PERSON_ID, $this->id);

				if (!isset($this->lastTeacherCriteria) || !$this->lastTeacherCriteria->equals($criteria)) {
					$count = TeacherPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTeachers);
				}
			} else {
				$count = count($this->collTeachers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Teacher object to this object
	 * through the Teacher foreign key attribute.
	 *
	 * @param      Teacher $l Teacher
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTeacher(Teacher $l)
	{
		if ($this->collTeachers === null) {
			$this->initTeachers();
		}
		if (!in_array($l, $this->collTeachers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTeachers, $l);
			$l->setPerson($this);
		}
	}

	/**
	 * Clears out the collTutors collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTutors()
	 */
	public function clearTutors()
	{
		$this->collTutors = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTutors collection (array).
	 *
	 * By default this just sets the collTutors collection to an empty array (like clearcollTutors());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTutors()
	{
		$this->collTutors = array();
	}

	/**
	 * Gets an array of Tutor objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related Tutors from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tutor[]
	 * @throws     PropelException
	 */
	public function getTutors($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTutors === null) {
			if ($this->isNew()) {
			   $this->collTutors = array();
			} else {

				$criteria->add(TutorPeer::PERSON_ID, $this->id);

				TutorPeer::addSelectColumns($criteria);
				$this->collTutors = TutorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TutorPeer::PERSON_ID, $this->id);

				TutorPeer::addSelectColumns($criteria);
				if (!isset($this->lastTutorCriteria) || !$this->lastTutorCriteria->equals($criteria)) {
					$this->collTutors = TutorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTutorCriteria = $criteria;
		return $this->collTutors;
	}

	/**
	 * Returns the number of related Tutor objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tutor objects.
	 * @throws     PropelException
	 */
	public function countTutors(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTutors === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TutorPeer::PERSON_ID, $this->id);

				$count = TutorPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TutorPeer::PERSON_ID, $this->id);

				if (!isset($this->lastTutorCriteria) || !$this->lastTutorCriteria->equals($criteria)) {
					$count = TutorPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTutors);
				}
			} else {
				$count = count($this->collTutors);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tutor object to this object
	 * through the Tutor foreign key attribute.
	 *
	 * @param      Tutor $l Tutor
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTutor(Tutor $l)
	{
		if ($this->collTutors === null) {
			$this->initTutors();
		}
		if (!in_array($l, $this->collTutors, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTutors, $l);
			$l->setPerson($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Tutors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getTutorsJoinOccupation($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTutors === null) {
			if ($this->isNew()) {
				$this->collTutors = array();
			} else {

				$criteria->add(TutorPeer::PERSON_ID, $this->id);

				$this->collTutors = TutorPeer::doSelectJoinOccupation($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TutorPeer::PERSON_ID, $this->id);

			if (!isset($this->lastTutorCriteria) || !$this->lastTutorCriteria->equals($criteria)) {
				$this->collTutors = TutorPeer::doSelectJoinOccupation($criteria, $con, $join_behavior);
			}
		}
		$this->lastTutorCriteria = $criteria;

		return $this->collTutors;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Tutors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getTutorsJoinTutorType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTutors === null) {
			if ($this->isNew()) {
				$this->collTutors = array();
			} else {

				$criteria->add(TutorPeer::PERSON_ID, $this->id);

				$this->collTutors = TutorPeer::doSelectJoinTutorType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TutorPeer::PERSON_ID, $this->id);

			if (!isset($this->lastTutorCriteria) || !$this->lastTutorCriteria->equals($criteria)) {
				$this->collTutors = TutorPeer::doSelectJoinTutorType($criteria, $con, $join_behavior);
			}
		}
		$this->lastTutorCriteria = $criteria;

		return $this->collTutors;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Tutors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getTutorsJoinOccupationCategory($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTutors === null) {
			if ($this->isNew()) {
				$this->collTutors = array();
			} else {

				$criteria->add(TutorPeer::PERSON_ID, $this->id);

				$this->collTutors = TutorPeer::doSelectJoinOccupationCategory($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TutorPeer::PERSON_ID, $this->id);

			if (!isset($this->lastTutorCriteria) || !$this->lastTutorCriteria->equals($criteria)) {
				$this->collTutors = TutorPeer::doSelectJoinOccupationCategory($criteria, $con, $join_behavior);
			}
		}
		$this->lastTutorCriteria = $criteria;

		return $this->collTutors;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Tutors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getTutorsJoinStudy($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTutors === null) {
			if ($this->isNew()) {
				$this->collTutors = array();
			} else {

				$criteria->add(TutorPeer::PERSON_ID, $this->id);

				$this->collTutors = TutorPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TutorPeer::PERSON_ID, $this->id);

			if (!isset($this->lastTutorCriteria) || !$this->lastTutorCriteria->equals($criteria)) {
				$this->collTutors = TutorPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		}
		$this->lastTutorCriteria = $criteria;

		return $this->collTutors;
	}

	/**
	 * Clears out the collLicenses collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLicenses()
	 */
	public function clearLicenses()
	{
		$this->collLicenses = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLicenses collection (array).
	 *
	 * By default this just sets the collLicenses collection to an empty array (like clearcollLicenses());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLicenses()
	{
		$this->collLicenses = array();
	}

	/**
	 * Gets an array of License objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related Licenses from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array License[]
	 * @throws     PropelException
	 */
	public function getLicenses($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLicenses === null) {
			if ($this->isNew()) {
			   $this->collLicenses = array();
			} else {

				$criteria->add(LicensePeer::PERSON_ID, $this->id);

				LicensePeer::addSelectColumns($criteria);
				$this->collLicenses = LicensePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LicensePeer::PERSON_ID, $this->id);

				LicensePeer::addSelectColumns($criteria);
				if (!isset($this->lastLicenseCriteria) || !$this->lastLicenseCriteria->equals($criteria)) {
					$this->collLicenses = LicensePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLicenseCriteria = $criteria;
		return $this->collLicenses;
	}

	/**
	 * Returns the number of related License objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related License objects.
	 * @throws     PropelException
	 */
	public function countLicenses(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLicenses === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LicensePeer::PERSON_ID, $this->id);

				$count = LicensePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LicensePeer::PERSON_ID, $this->id);

				if (!isset($this->lastLicenseCriteria) || !$this->lastLicenseCriteria->equals($criteria)) {
					$count = LicensePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collLicenses);
				}
			} else {
				$count = count($this->collLicenses);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a License object to this object
	 * through the License foreign key attribute.
	 *
	 * @param      License $l License
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLicense(License $l)
	{
		if ($this->collLicenses === null) {
			$this->initLicenses();
		}
		if (!in_array($l, $this->collLicenses, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLicenses, $l);
			$l->setPerson($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Licenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getLicensesJoinLicenseType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLicenses === null) {
			if ($this->isNew()) {
				$this->collLicenses = array();
			} else {

				$criteria->add(LicensePeer::PERSON_ID, $this->id);

				$this->collLicenses = LicensePeer::doSelectJoinLicenseType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(LicensePeer::PERSON_ID, $this->id);

			if (!isset($this->lastLicenseCriteria) || !$this->lastLicenseCriteria->equals($criteria)) {
				$this->collLicenses = LicensePeer::doSelectJoinLicenseType($criteria, $con, $join_behavior);
			}
		}
		$this->lastLicenseCriteria = $criteria;

		return $this->collLicenses;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collStudentDisciplinarySanctionsRelatedByApplicantId) {
				foreach ((array) $this->collStudentDisciplinarySanctionsRelatedByApplicantId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collStudentDisciplinarySanctionsRelatedByResponsibleId) {
				foreach ((array) $this->collStudentDisciplinarySanctionsRelatedByResponsibleId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPersonals) {
				foreach ((array) $this->collPersonals as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collStudents) {
				foreach ((array) $this->collStudents as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTeachers) {
				foreach ((array) $this->collTeachers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTutors) {
				foreach ((array) $this->collTutors as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLicenses) {
				foreach ((array) $this->collLicenses as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collStudentDisciplinarySanctionsRelatedByApplicantId = null;
		$this->collStudentDisciplinarySanctionsRelatedByResponsibleId = null;
		$this->collPersonals = null;
		$this->collStudents = null;
		$this->collTeachers = null;
		$this->collTutors = null;
		$this->collLicenses = null;
			$this->aAddress = null;
			$this->asfGuardUser = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BasePerson:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BasePerson::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BasePerson
