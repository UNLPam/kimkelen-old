<?php

/**
 * Base class that represents a row from the 'school_year' table.
 *
 * Representa un año lectivo
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Thu Aug 23 21:09:09 2018
 *
 * @package    lib.model.om
 */
abstract class BaseSchoolYear extends BaseObject  implements Persistent {


  const PEER = 'SchoolYearPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        SchoolYearPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the year field.
	 * @var        int
	 */
	protected $year;

	/**
	 * The value for the is_active field.
	 * @var        boolean
	 */
	protected $is_active;

	/**
	 * The value for the is_closed field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_closed;

	/**
	 * @var        array Course[] Collection to store aggregation of Course objects.
	 */
	protected $collCourses;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCourses.
	 */
	private $lastCourseCriteria = null;

	/**
	 * @var        array StudentApprovedCareerSubject[] Collection to store aggregation of StudentApprovedCareerSubject objects.
	 */
	protected $collStudentApprovedCareerSubjects;

	/**
	 * @var        Criteria The criteria used to select the current contents of collStudentApprovedCareerSubjects.
	 */
	private $lastStudentApprovedCareerSubjectCriteria = null;

	/**
	 * @var        array StudentApprovedCourseSubject[] Collection to store aggregation of StudentApprovedCourseSubject objects.
	 */
	protected $collStudentApprovedCourseSubjects;

	/**
	 * @var        Criteria The criteria used to select the current contents of collStudentApprovedCourseSubjects.
	 */
	private $lastStudentApprovedCourseSubjectCriteria = null;

	/**
	 * @var        array Examination[] Collection to store aggregation of Examination objects.
	 */
	protected $collExaminations;

	/**
	 * @var        Criteria The criteria used to select the current contents of collExaminations.
	 */
	private $lastExaminationCriteria = null;

	/**
	 * @var        array ExaminationRepproved[] Collection to store aggregation of ExaminationRepproved objects.
	 */
	protected $collExaminationRepproveds;

	/**
	 * @var        Criteria The criteria used to select the current contents of collExaminationRepproveds.
	 */
	private $lastExaminationRepprovedCriteria = null;

	/**
	 * @var        array Pathway[] Collection to store aggregation of Pathway objects.
	 */
	protected $collPathways;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPathways.
	 */
	private $lastPathwayCriteria = null;

	/**
	 * @var        array CareerStudent[] Collection to store aggregation of CareerStudent objects.
	 */
	protected $collCareerStudents;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCareerStudents.
	 */
	private $lastCareerStudentCriteria = null;

	/**
	 * @var        array CareerSchoolYear[] Collection to store aggregation of CareerSchoolYear objects.
	 */
	protected $collCareerSchoolYears;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCareerSchoolYears.
	 */
	private $lastCareerSchoolYearCriteria = null;

	/**
	 * @var        array SchoolYearStudent[] Collection to store aggregation of SchoolYearStudent objects.
	 */
	protected $collSchoolYearStudents;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSchoolYearStudents.
	 */
	private $lastSchoolYearStudentCriteria = null;

	/**
	 * @var        array StudentDisciplinarySanction[] Collection to store aggregation of StudentDisciplinarySanction objects.
	 */
	protected $collStudentDisciplinarySanctions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collStudentDisciplinarySanctions.
	 */
	private $lastStudentDisciplinarySanctionCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseSchoolYear object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->is_closed = false;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [year] column value.
	 * numero que representa el año (debe ser de 4 dígitos)
	 * @return     int
	 */
	public function getYear()
	{
		return $this->year;
	}

	/**
	 * Get the [is_active] column value.
	 * Representa si un año lectivo esta activo o no
	 * @return     boolean
	 */
	public function getIsActive()
	{
		return $this->is_active;
	}

	/**
	 * Get the [is_closed] column value.
	 * Representa si esta cerrado el año lectivo o no
	 * @return     boolean
	 */
	public function getIsClosed()
	{
		return $this->is_closed;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     SchoolYear The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = SchoolYearPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [year] column.
	 * numero que representa el año (debe ser de 4 dígitos)
	 * @param      int $v new value
	 * @return     SchoolYear The current object (for fluent API support)
	 */
	public function setYear($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->year !== $v) {
			$this->year = $v;
			$this->modifiedColumns[] = SchoolYearPeer::YEAR;
		}

		return $this;
	} // setYear()

	/**
	 * Set the value of [is_active] column.
	 * Representa si un año lectivo esta activo o no
	 * @param      boolean $v new value
	 * @return     SchoolYear The current object (for fluent API support)
	 */
	public function setIsActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_active !== $v) {
			$this->is_active = $v;
			$this->modifiedColumns[] = SchoolYearPeer::IS_ACTIVE;
		}

		return $this;
	} // setIsActive()

	/**
	 * Set the value of [is_closed] column.
	 * Representa si esta cerrado el año lectivo o no
	 * @param      boolean $v new value
	 * @return     SchoolYear The current object (for fluent API support)
	 */
	public function setIsClosed($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_closed !== $v || $v === false) {
			$this->is_closed = $v;
			$this->modifiedColumns[] = SchoolYearPeer::IS_CLOSED;
		}

		return $this;
	} // setIsClosed()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(SchoolYearPeer::IS_CLOSED))) {
				return false;
			}

			if ($this->is_closed !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->year = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->is_active = ($row[$startcol + 2] !== null) ? (boolean) $row[$startcol + 2] : null;
			$this->is_closed = ($row[$startcol + 3] !== null) ? (boolean) $row[$startcol + 3] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 4; // 4 = SchoolYearPeer::NUM_COLUMNS - SchoolYearPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating SchoolYear object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SchoolYearPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = SchoolYearPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collCourses = null;
			$this->lastCourseCriteria = null;

			$this->collStudentApprovedCareerSubjects = null;
			$this->lastStudentApprovedCareerSubjectCriteria = null;

			$this->collStudentApprovedCourseSubjects = null;
			$this->lastStudentApprovedCourseSubjectCriteria = null;

			$this->collExaminations = null;
			$this->lastExaminationCriteria = null;

			$this->collExaminationRepproveds = null;
			$this->lastExaminationRepprovedCriteria = null;

			$this->collPathways = null;
			$this->lastPathwayCriteria = null;

			$this->collCareerStudents = null;
			$this->lastCareerStudentCriteria = null;

			$this->collCareerSchoolYears = null;
			$this->lastCareerSchoolYearCriteria = null;

			$this->collSchoolYearStudents = null;
			$this->lastSchoolYearStudentCriteria = null;

			$this->collStudentDisciplinarySanctions = null;
			$this->lastStudentDisciplinarySanctionCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseSchoolYear:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SchoolYearPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			SchoolYearPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseSchoolYear:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseSchoolYear:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SchoolYearPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseSchoolYear:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			SchoolYearPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = SchoolYearPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = SchoolYearPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += SchoolYearPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collCourses !== null) {
				foreach ($this->collCourses as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collStudentApprovedCareerSubjects !== null) {
				foreach ($this->collStudentApprovedCareerSubjects as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collStudentApprovedCourseSubjects !== null) {
				foreach ($this->collStudentApprovedCourseSubjects as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collExaminations !== null) {
				foreach ($this->collExaminations as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collExaminationRepproveds !== null) {
				foreach ($this->collExaminationRepproveds as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPathways !== null) {
				foreach ($this->collPathways as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCareerStudents !== null) {
				foreach ($this->collCareerStudents as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCareerSchoolYears !== null) {
				foreach ($this->collCareerSchoolYears as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSchoolYearStudents !== null) {
				foreach ($this->collSchoolYearStudents as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collStudentDisciplinarySanctions !== null) {
				foreach ($this->collStudentDisciplinarySanctions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = SchoolYearPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collCourses !== null) {
					foreach ($this->collCourses as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collStudentApprovedCareerSubjects !== null) {
					foreach ($this->collStudentApprovedCareerSubjects as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collStudentApprovedCourseSubjects !== null) {
					foreach ($this->collStudentApprovedCourseSubjects as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collExaminations !== null) {
					foreach ($this->collExaminations as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collExaminationRepproveds !== null) {
					foreach ($this->collExaminationRepproveds as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPathways !== null) {
					foreach ($this->collPathways as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCareerStudents !== null) {
					foreach ($this->collCareerStudents as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCareerSchoolYears !== null) {
					foreach ($this->collCareerSchoolYears as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSchoolYearStudents !== null) {
					foreach ($this->collSchoolYearStudents as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collStudentDisciplinarySanctions !== null) {
					foreach ($this->collStudentDisciplinarySanctions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SchoolYearPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getYear();
				break;
			case 2:
				return $this->getIsActive();
				break;
			case 3:
				return $this->getIsClosed();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = SchoolYearPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getYear(),
			$keys[2] => $this->getIsActive(),
			$keys[3] => $this->getIsClosed(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SchoolYearPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setYear($value);
				break;
			case 2:
				$this->setIsActive($value);
				break;
			case 3:
				$this->setIsClosed($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = SchoolYearPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setYear($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIsActive($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setIsClosed($arr[$keys[3]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);

		if ($this->isColumnModified(SchoolYearPeer::ID)) $criteria->add(SchoolYearPeer::ID, $this->id);
		if ($this->isColumnModified(SchoolYearPeer::YEAR)) $criteria->add(SchoolYearPeer::YEAR, $this->year);
		if ($this->isColumnModified(SchoolYearPeer::IS_ACTIVE)) $criteria->add(SchoolYearPeer::IS_ACTIVE, $this->is_active);
		if ($this->isColumnModified(SchoolYearPeer::IS_CLOSED)) $criteria->add(SchoolYearPeer::IS_CLOSED, $this->is_closed);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);

		$criteria->add(SchoolYearPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of SchoolYear (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setYear($this->year);

		$copyObj->setIsActive($this->is_active);

		$copyObj->setIsClosed($this->is_closed);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getCourses() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCourse($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getStudentApprovedCareerSubjects() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addStudentApprovedCareerSubject($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getStudentApprovedCourseSubjects() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addStudentApprovedCourseSubject($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getExaminations() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addExamination($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getExaminationRepproveds() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addExaminationRepproved($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPathways() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPathway($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCareerStudents() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCareerStudent($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCareerSchoolYears() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCareerSchoolYear($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSchoolYearStudents() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSchoolYearStudent($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getStudentDisciplinarySanctions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addStudentDisciplinarySanction($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     SchoolYear Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     SchoolYearPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new SchoolYearPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collCourses collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCourses()
	 */
	public function clearCourses()
	{
		$this->collCourses = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCourses collection (array).
	 *
	 * By default this just sets the collCourses collection to an empty array (like clearcollCourses());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCourses()
	{
		$this->collCourses = array();
	}

	/**
	 * Gets an array of Course objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SchoolYear has previously been saved, it will retrieve
	 * related Courses from storage. If this SchoolYear is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Course[]
	 * @throws     PropelException
	 */
	public function getCourses($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCourses === null) {
			if ($this->isNew()) {
			   $this->collCourses = array();
			} else {

				$criteria->add(CoursePeer::SCHOOL_YEAR_ID, $this->id);

				CoursePeer::addSelectColumns($criteria);
				$this->collCourses = CoursePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CoursePeer::SCHOOL_YEAR_ID, $this->id);

				CoursePeer::addSelectColumns($criteria);
				if (!isset($this->lastCourseCriteria) || !$this->lastCourseCriteria->equals($criteria)) {
					$this->collCourses = CoursePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCourseCriteria = $criteria;
		return $this->collCourses;
	}

	/**
	 * Returns the number of related Course objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Course objects.
	 * @throws     PropelException
	 */
	public function countCourses(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCourses === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CoursePeer::SCHOOL_YEAR_ID, $this->id);

				$count = CoursePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CoursePeer::SCHOOL_YEAR_ID, $this->id);

				if (!isset($this->lastCourseCriteria) || !$this->lastCourseCriteria->equals($criteria)) {
					$count = CoursePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCourses);
				}
			} else {
				$count = count($this->collCourses);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Course object to this object
	 * through the Course foreign key attribute.
	 *
	 * @param      Course $l Course
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCourse(Course $l)
	{
		if ($this->collCourses === null) {
			$this->initCourses();
		}
		if (!in_array($l, $this->collCourses, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCourses, $l);
			$l->setSchoolYear($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related Courses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getCoursesJoinDivisionRelatedByDivisionId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCourses === null) {
			if ($this->isNew()) {
				$this->collCourses = array();
			} else {

				$criteria->add(CoursePeer::SCHOOL_YEAR_ID, $this->id);

				$this->collCourses = CoursePeer::doSelectJoinDivisionRelatedByDivisionId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CoursePeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastCourseCriteria) || !$this->lastCourseCriteria->equals($criteria)) {
				$this->collCourses = CoursePeer::doSelectJoinDivisionRelatedByDivisionId($criteria, $con, $join_behavior);
			}
		}
		$this->lastCourseCriteria = $criteria;

		return $this->collCourses;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related Courses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getCoursesJoinDivisionRelatedByRelatedDivisionId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCourses === null) {
			if ($this->isNew()) {
				$this->collCourses = array();
			} else {

				$criteria->add(CoursePeer::SCHOOL_YEAR_ID, $this->id);

				$this->collCourses = CoursePeer::doSelectJoinDivisionRelatedByRelatedDivisionId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CoursePeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastCourseCriteria) || !$this->lastCourseCriteria->equals($criteria)) {
				$this->collCourses = CoursePeer::doSelectJoinDivisionRelatedByRelatedDivisionId($criteria, $con, $join_behavior);
			}
		}
		$this->lastCourseCriteria = $criteria;

		return $this->collCourses;
	}

	/**
	 * Clears out the collStudentApprovedCareerSubjects collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addStudentApprovedCareerSubjects()
	 */
	public function clearStudentApprovedCareerSubjects()
	{
		$this->collStudentApprovedCareerSubjects = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collStudentApprovedCareerSubjects collection (array).
	 *
	 * By default this just sets the collStudentApprovedCareerSubjects collection to an empty array (like clearcollStudentApprovedCareerSubjects());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initStudentApprovedCareerSubjects()
	{
		$this->collStudentApprovedCareerSubjects = array();
	}

	/**
	 * Gets an array of StudentApprovedCareerSubject objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SchoolYear has previously been saved, it will retrieve
	 * related StudentApprovedCareerSubjects from storage. If this SchoolYear is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array StudentApprovedCareerSubject[]
	 * @throws     PropelException
	 */
	public function getStudentApprovedCareerSubjects($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentApprovedCareerSubjects === null) {
			if ($this->isNew()) {
			   $this->collStudentApprovedCareerSubjects = array();
			} else {

				$criteria->add(StudentApprovedCareerSubjectPeer::SCHOOL_YEAR_ID, $this->id);

				StudentApprovedCareerSubjectPeer::addSelectColumns($criteria);
				$this->collStudentApprovedCareerSubjects = StudentApprovedCareerSubjectPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(StudentApprovedCareerSubjectPeer::SCHOOL_YEAR_ID, $this->id);

				StudentApprovedCareerSubjectPeer::addSelectColumns($criteria);
				if (!isset($this->lastStudentApprovedCareerSubjectCriteria) || !$this->lastStudentApprovedCareerSubjectCriteria->equals($criteria)) {
					$this->collStudentApprovedCareerSubjects = StudentApprovedCareerSubjectPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastStudentApprovedCareerSubjectCriteria = $criteria;
		return $this->collStudentApprovedCareerSubjects;
	}

	/**
	 * Returns the number of related StudentApprovedCareerSubject objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related StudentApprovedCareerSubject objects.
	 * @throws     PropelException
	 */
	public function countStudentApprovedCareerSubjects(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collStudentApprovedCareerSubjects === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(StudentApprovedCareerSubjectPeer::SCHOOL_YEAR_ID, $this->id);

				$count = StudentApprovedCareerSubjectPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(StudentApprovedCareerSubjectPeer::SCHOOL_YEAR_ID, $this->id);

				if (!isset($this->lastStudentApprovedCareerSubjectCriteria) || !$this->lastStudentApprovedCareerSubjectCriteria->equals($criteria)) {
					$count = StudentApprovedCareerSubjectPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collStudentApprovedCareerSubjects);
				}
			} else {
				$count = count($this->collStudentApprovedCareerSubjects);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a StudentApprovedCareerSubject object to this object
	 * through the StudentApprovedCareerSubject foreign key attribute.
	 *
	 * @param      StudentApprovedCareerSubject $l StudentApprovedCareerSubject
	 * @return     void
	 * @throws     PropelException
	 */
	public function addStudentApprovedCareerSubject(StudentApprovedCareerSubject $l)
	{
		if ($this->collStudentApprovedCareerSubjects === null) {
			$this->initStudentApprovedCareerSubjects();
		}
		if (!in_array($l, $this->collStudentApprovedCareerSubjects, true)) { // only add it if the **same** object is not already associated
			array_push($this->collStudentApprovedCareerSubjects, $l);
			$l->setSchoolYear($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related StudentApprovedCareerSubjects from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getStudentApprovedCareerSubjectsJoinCareerSubject($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentApprovedCareerSubjects === null) {
			if ($this->isNew()) {
				$this->collStudentApprovedCareerSubjects = array();
			} else {

				$criteria->add(StudentApprovedCareerSubjectPeer::SCHOOL_YEAR_ID, $this->id);

				$this->collStudentApprovedCareerSubjects = StudentApprovedCareerSubjectPeer::doSelectJoinCareerSubject($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentApprovedCareerSubjectPeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastStudentApprovedCareerSubjectCriteria) || !$this->lastStudentApprovedCareerSubjectCriteria->equals($criteria)) {
				$this->collStudentApprovedCareerSubjects = StudentApprovedCareerSubjectPeer::doSelectJoinCareerSubject($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentApprovedCareerSubjectCriteria = $criteria;

		return $this->collStudentApprovedCareerSubjects;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related StudentApprovedCareerSubjects from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getStudentApprovedCareerSubjectsJoinStudent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentApprovedCareerSubjects === null) {
			if ($this->isNew()) {
				$this->collStudentApprovedCareerSubjects = array();
			} else {

				$criteria->add(StudentApprovedCareerSubjectPeer::SCHOOL_YEAR_ID, $this->id);

				$this->collStudentApprovedCareerSubjects = StudentApprovedCareerSubjectPeer::doSelectJoinStudent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentApprovedCareerSubjectPeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastStudentApprovedCareerSubjectCriteria) || !$this->lastStudentApprovedCareerSubjectCriteria->equals($criteria)) {
				$this->collStudentApprovedCareerSubjects = StudentApprovedCareerSubjectPeer::doSelectJoinStudent($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentApprovedCareerSubjectCriteria = $criteria;

		return $this->collStudentApprovedCareerSubjects;
	}

	/**
	 * Clears out the collStudentApprovedCourseSubjects collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addStudentApprovedCourseSubjects()
	 */
	public function clearStudentApprovedCourseSubjects()
	{
		$this->collStudentApprovedCourseSubjects = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collStudentApprovedCourseSubjects collection (array).
	 *
	 * By default this just sets the collStudentApprovedCourseSubjects collection to an empty array (like clearcollStudentApprovedCourseSubjects());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initStudentApprovedCourseSubjects()
	{
		$this->collStudentApprovedCourseSubjects = array();
	}

	/**
	 * Gets an array of StudentApprovedCourseSubject objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SchoolYear has previously been saved, it will retrieve
	 * related StudentApprovedCourseSubjects from storage. If this SchoolYear is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array StudentApprovedCourseSubject[]
	 * @throws     PropelException
	 */
	public function getStudentApprovedCourseSubjects($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentApprovedCourseSubjects === null) {
			if ($this->isNew()) {
			   $this->collStudentApprovedCourseSubjects = array();
			} else {

				$criteria->add(StudentApprovedCourseSubjectPeer::SCHOOL_YEAR_ID, $this->id);

				StudentApprovedCourseSubjectPeer::addSelectColumns($criteria);
				$this->collStudentApprovedCourseSubjects = StudentApprovedCourseSubjectPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(StudentApprovedCourseSubjectPeer::SCHOOL_YEAR_ID, $this->id);

				StudentApprovedCourseSubjectPeer::addSelectColumns($criteria);
				if (!isset($this->lastStudentApprovedCourseSubjectCriteria) || !$this->lastStudentApprovedCourseSubjectCriteria->equals($criteria)) {
					$this->collStudentApprovedCourseSubjects = StudentApprovedCourseSubjectPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastStudentApprovedCourseSubjectCriteria = $criteria;
		return $this->collStudentApprovedCourseSubjects;
	}

	/**
	 * Returns the number of related StudentApprovedCourseSubject objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related StudentApprovedCourseSubject objects.
	 * @throws     PropelException
	 */
	public function countStudentApprovedCourseSubjects(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collStudentApprovedCourseSubjects === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(StudentApprovedCourseSubjectPeer::SCHOOL_YEAR_ID, $this->id);

				$count = StudentApprovedCourseSubjectPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(StudentApprovedCourseSubjectPeer::SCHOOL_YEAR_ID, $this->id);

				if (!isset($this->lastStudentApprovedCourseSubjectCriteria) || !$this->lastStudentApprovedCourseSubjectCriteria->equals($criteria)) {
					$count = StudentApprovedCourseSubjectPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collStudentApprovedCourseSubjects);
				}
			} else {
				$count = count($this->collStudentApprovedCourseSubjects);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a StudentApprovedCourseSubject object to this object
	 * through the StudentApprovedCourseSubject foreign key attribute.
	 *
	 * @param      StudentApprovedCourseSubject $l StudentApprovedCourseSubject
	 * @return     void
	 * @throws     PropelException
	 */
	public function addStudentApprovedCourseSubject(StudentApprovedCourseSubject $l)
	{
		if ($this->collStudentApprovedCourseSubjects === null) {
			$this->initStudentApprovedCourseSubjects();
		}
		if (!in_array($l, $this->collStudentApprovedCourseSubjects, true)) { // only add it if the **same** object is not already associated
			array_push($this->collStudentApprovedCourseSubjects, $l);
			$l->setSchoolYear($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related StudentApprovedCourseSubjects from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getStudentApprovedCourseSubjectsJoinCourseSubject($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentApprovedCourseSubjects === null) {
			if ($this->isNew()) {
				$this->collStudentApprovedCourseSubjects = array();
			} else {

				$criteria->add(StudentApprovedCourseSubjectPeer::SCHOOL_YEAR_ID, $this->id);

				$this->collStudentApprovedCourseSubjects = StudentApprovedCourseSubjectPeer::doSelectJoinCourseSubject($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentApprovedCourseSubjectPeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastStudentApprovedCourseSubjectCriteria) || !$this->lastStudentApprovedCourseSubjectCriteria->equals($criteria)) {
				$this->collStudentApprovedCourseSubjects = StudentApprovedCourseSubjectPeer::doSelectJoinCourseSubject($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentApprovedCourseSubjectCriteria = $criteria;

		return $this->collStudentApprovedCourseSubjects;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related StudentApprovedCourseSubjects from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getStudentApprovedCourseSubjectsJoinStudent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentApprovedCourseSubjects === null) {
			if ($this->isNew()) {
				$this->collStudentApprovedCourseSubjects = array();
			} else {

				$criteria->add(StudentApprovedCourseSubjectPeer::SCHOOL_YEAR_ID, $this->id);

				$this->collStudentApprovedCourseSubjects = StudentApprovedCourseSubjectPeer::doSelectJoinStudent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentApprovedCourseSubjectPeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastStudentApprovedCourseSubjectCriteria) || !$this->lastStudentApprovedCourseSubjectCriteria->equals($criteria)) {
				$this->collStudentApprovedCourseSubjects = StudentApprovedCourseSubjectPeer::doSelectJoinStudent($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentApprovedCourseSubjectCriteria = $criteria;

		return $this->collStudentApprovedCourseSubjects;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related StudentApprovedCourseSubjects from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getStudentApprovedCourseSubjectsJoinStudentApprovedCareerSubject($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentApprovedCourseSubjects === null) {
			if ($this->isNew()) {
				$this->collStudentApprovedCourseSubjects = array();
			} else {

				$criteria->add(StudentApprovedCourseSubjectPeer::SCHOOL_YEAR_ID, $this->id);

				$this->collStudentApprovedCourseSubjects = StudentApprovedCourseSubjectPeer::doSelectJoinStudentApprovedCareerSubject($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentApprovedCourseSubjectPeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastStudentApprovedCourseSubjectCriteria) || !$this->lastStudentApprovedCourseSubjectCriteria->equals($criteria)) {
				$this->collStudentApprovedCourseSubjects = StudentApprovedCourseSubjectPeer::doSelectJoinStudentApprovedCareerSubject($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentApprovedCourseSubjectCriteria = $criteria;

		return $this->collStudentApprovedCourseSubjects;
	}

	/**
	 * Clears out the collExaminations collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addExaminations()
	 */
	public function clearExaminations()
	{
		$this->collExaminations = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collExaminations collection (array).
	 *
	 * By default this just sets the collExaminations collection to an empty array (like clearcollExaminations());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initExaminations()
	{
		$this->collExaminations = array();
	}

	/**
	 * Gets an array of Examination objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SchoolYear has previously been saved, it will retrieve
	 * related Examinations from storage. If this SchoolYear is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Examination[]
	 * @throws     PropelException
	 */
	public function getExaminations($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collExaminations === null) {
			if ($this->isNew()) {
			   $this->collExaminations = array();
			} else {

				$criteria->add(ExaminationPeer::SCHOOL_YEAR_ID, $this->id);

				ExaminationPeer::addSelectColumns($criteria);
				$this->collExaminations = ExaminationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ExaminationPeer::SCHOOL_YEAR_ID, $this->id);

				ExaminationPeer::addSelectColumns($criteria);
				if (!isset($this->lastExaminationCriteria) || !$this->lastExaminationCriteria->equals($criteria)) {
					$this->collExaminations = ExaminationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastExaminationCriteria = $criteria;
		return $this->collExaminations;
	}

	/**
	 * Returns the number of related Examination objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Examination objects.
	 * @throws     PropelException
	 */
	public function countExaminations(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collExaminations === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ExaminationPeer::SCHOOL_YEAR_ID, $this->id);

				$count = ExaminationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ExaminationPeer::SCHOOL_YEAR_ID, $this->id);

				if (!isset($this->lastExaminationCriteria) || !$this->lastExaminationCriteria->equals($criteria)) {
					$count = ExaminationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collExaminations);
				}
			} else {
				$count = count($this->collExaminations);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Examination object to this object
	 * through the Examination foreign key attribute.
	 *
	 * @param      Examination $l Examination
	 * @return     void
	 * @throws     PropelException
	 */
	public function addExamination(Examination $l)
	{
		if ($this->collExaminations === null) {
			$this->initExaminations();
		}
		if (!in_array($l, $this->collExaminations, true)) { // only add it if the **same** object is not already associated
			array_push($this->collExaminations, $l);
			$l->setSchoolYear($this);
		}
	}

	/**
	 * Clears out the collExaminationRepproveds collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addExaminationRepproveds()
	 */
	public function clearExaminationRepproveds()
	{
		$this->collExaminationRepproveds = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collExaminationRepproveds collection (array).
	 *
	 * By default this just sets the collExaminationRepproveds collection to an empty array (like clearcollExaminationRepproveds());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initExaminationRepproveds()
	{
		$this->collExaminationRepproveds = array();
	}

	/**
	 * Gets an array of ExaminationRepproved objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SchoolYear has previously been saved, it will retrieve
	 * related ExaminationRepproveds from storage. If this SchoolYear is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ExaminationRepproved[]
	 * @throws     PropelException
	 */
	public function getExaminationRepproveds($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collExaminationRepproveds === null) {
			if ($this->isNew()) {
			   $this->collExaminationRepproveds = array();
			} else {

				$criteria->add(ExaminationRepprovedPeer::SCHOOL_YEAR_ID, $this->id);

				ExaminationRepprovedPeer::addSelectColumns($criteria);
				$this->collExaminationRepproveds = ExaminationRepprovedPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ExaminationRepprovedPeer::SCHOOL_YEAR_ID, $this->id);

				ExaminationRepprovedPeer::addSelectColumns($criteria);
				if (!isset($this->lastExaminationRepprovedCriteria) || !$this->lastExaminationRepprovedCriteria->equals($criteria)) {
					$this->collExaminationRepproveds = ExaminationRepprovedPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastExaminationRepprovedCriteria = $criteria;
		return $this->collExaminationRepproveds;
	}

	/**
	 * Returns the number of related ExaminationRepproved objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ExaminationRepproved objects.
	 * @throws     PropelException
	 */
	public function countExaminationRepproveds(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collExaminationRepproveds === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ExaminationRepprovedPeer::SCHOOL_YEAR_ID, $this->id);

				$count = ExaminationRepprovedPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ExaminationRepprovedPeer::SCHOOL_YEAR_ID, $this->id);

				if (!isset($this->lastExaminationRepprovedCriteria) || !$this->lastExaminationRepprovedCriteria->equals($criteria)) {
					$count = ExaminationRepprovedPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collExaminationRepproveds);
				}
			} else {
				$count = count($this->collExaminationRepproveds);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ExaminationRepproved object to this object
	 * through the ExaminationRepproved foreign key attribute.
	 *
	 * @param      ExaminationRepproved $l ExaminationRepproved
	 * @return     void
	 * @throws     PropelException
	 */
	public function addExaminationRepproved(ExaminationRepproved $l)
	{
		if ($this->collExaminationRepproveds === null) {
			$this->initExaminationRepproveds();
		}
		if (!in_array($l, $this->collExaminationRepproveds, true)) { // only add it if the **same** object is not already associated
			array_push($this->collExaminationRepproveds, $l);
			$l->setSchoolYear($this);
		}
	}

	/**
	 * Clears out the collPathways collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPathways()
	 */
	public function clearPathways()
	{
		$this->collPathways = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPathways collection (array).
	 *
	 * By default this just sets the collPathways collection to an empty array (like clearcollPathways());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPathways()
	{
		$this->collPathways = array();
	}

	/**
	 * Gets an array of Pathway objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SchoolYear has previously been saved, it will retrieve
	 * related Pathways from storage. If this SchoolYear is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Pathway[]
	 * @throws     PropelException
	 */
	public function getPathways($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPathways === null) {
			if ($this->isNew()) {
			   $this->collPathways = array();
			} else {

				$criteria->add(PathwayPeer::SCHOOL_YEAR_ID, $this->id);

				PathwayPeer::addSelectColumns($criteria);
				$this->collPathways = PathwayPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PathwayPeer::SCHOOL_YEAR_ID, $this->id);

				PathwayPeer::addSelectColumns($criteria);
				if (!isset($this->lastPathwayCriteria) || !$this->lastPathwayCriteria->equals($criteria)) {
					$this->collPathways = PathwayPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPathwayCriteria = $criteria;
		return $this->collPathways;
	}

	/**
	 * Returns the number of related Pathway objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Pathway objects.
	 * @throws     PropelException
	 */
	public function countPathways(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPathways === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PathwayPeer::SCHOOL_YEAR_ID, $this->id);

				$count = PathwayPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PathwayPeer::SCHOOL_YEAR_ID, $this->id);

				if (!isset($this->lastPathwayCriteria) || !$this->lastPathwayCriteria->equals($criteria)) {
					$count = PathwayPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPathways);
				}
			} else {
				$count = count($this->collPathways);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Pathway object to this object
	 * through the Pathway foreign key attribute.
	 *
	 * @param      Pathway $l Pathway
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPathway(Pathway $l)
	{
		if ($this->collPathways === null) {
			$this->initPathways();
		}
		if (!in_array($l, $this->collPathways, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPathways, $l);
			$l->setSchoolYear($this);
		}
	}

	/**
	 * Clears out the collCareerStudents collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCareerStudents()
	 */
	public function clearCareerStudents()
	{
		$this->collCareerStudents = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCareerStudents collection (array).
	 *
	 * By default this just sets the collCareerStudents collection to an empty array (like clearcollCareerStudents());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCareerStudents()
	{
		$this->collCareerStudents = array();
	}

	/**
	 * Gets an array of CareerStudent objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SchoolYear has previously been saved, it will retrieve
	 * related CareerStudents from storage. If this SchoolYear is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CareerStudent[]
	 * @throws     PropelException
	 */
	public function getCareerStudents($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCareerStudents === null) {
			if ($this->isNew()) {
			   $this->collCareerStudents = array();
			} else {

				$criteria->add(CareerStudentPeer::GRADUATION_SCHOOL_YEAR_ID, $this->id);

				CareerStudentPeer::addSelectColumns($criteria);
				$this->collCareerStudents = CareerStudentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CareerStudentPeer::GRADUATION_SCHOOL_YEAR_ID, $this->id);

				CareerStudentPeer::addSelectColumns($criteria);
				if (!isset($this->lastCareerStudentCriteria) || !$this->lastCareerStudentCriteria->equals($criteria)) {
					$this->collCareerStudents = CareerStudentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCareerStudentCriteria = $criteria;
		return $this->collCareerStudents;
	}

	/**
	 * Returns the number of related CareerStudent objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CareerStudent objects.
	 * @throws     PropelException
	 */
	public function countCareerStudents(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCareerStudents === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CareerStudentPeer::GRADUATION_SCHOOL_YEAR_ID, $this->id);

				$count = CareerStudentPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CareerStudentPeer::GRADUATION_SCHOOL_YEAR_ID, $this->id);

				if (!isset($this->lastCareerStudentCriteria) || !$this->lastCareerStudentCriteria->equals($criteria)) {
					$count = CareerStudentPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCareerStudents);
				}
			} else {
				$count = count($this->collCareerStudents);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CareerStudent object to this object
	 * through the CareerStudent foreign key attribute.
	 *
	 * @param      CareerStudent $l CareerStudent
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCareerStudent(CareerStudent $l)
	{
		if ($this->collCareerStudents === null) {
			$this->initCareerStudents();
		}
		if (!in_array($l, $this->collCareerStudents, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCareerStudents, $l);
			$l->setSchoolYear($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related CareerStudents from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getCareerStudentsJoinCareer($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCareerStudents === null) {
			if ($this->isNew()) {
				$this->collCareerStudents = array();
			} else {

				$criteria->add(CareerStudentPeer::GRADUATION_SCHOOL_YEAR_ID, $this->id);

				$this->collCareerStudents = CareerStudentPeer::doSelectJoinCareer($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CareerStudentPeer::GRADUATION_SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastCareerStudentCriteria) || !$this->lastCareerStudentCriteria->equals($criteria)) {
				$this->collCareerStudents = CareerStudentPeer::doSelectJoinCareer($criteria, $con, $join_behavior);
			}
		}
		$this->lastCareerStudentCriteria = $criteria;

		return $this->collCareerStudents;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related CareerStudents from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getCareerStudentsJoinStudent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCareerStudents === null) {
			if ($this->isNew()) {
				$this->collCareerStudents = array();
			} else {

				$criteria->add(CareerStudentPeer::GRADUATION_SCHOOL_YEAR_ID, $this->id);

				$this->collCareerStudents = CareerStudentPeer::doSelectJoinStudent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CareerStudentPeer::GRADUATION_SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastCareerStudentCriteria) || !$this->lastCareerStudentCriteria->equals($criteria)) {
				$this->collCareerStudents = CareerStudentPeer::doSelectJoinStudent($criteria, $con, $join_behavior);
			}
		}
		$this->lastCareerStudentCriteria = $criteria;

		return $this->collCareerStudents;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related CareerStudents from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getCareerStudentsJoinOrientation($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCareerStudents === null) {
			if ($this->isNew()) {
				$this->collCareerStudents = array();
			} else {

				$criteria->add(CareerStudentPeer::GRADUATION_SCHOOL_YEAR_ID, $this->id);

				$this->collCareerStudents = CareerStudentPeer::doSelectJoinOrientation($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CareerStudentPeer::GRADUATION_SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastCareerStudentCriteria) || !$this->lastCareerStudentCriteria->equals($criteria)) {
				$this->collCareerStudents = CareerStudentPeer::doSelectJoinOrientation($criteria, $con, $join_behavior);
			}
		}
		$this->lastCareerStudentCriteria = $criteria;

		return $this->collCareerStudents;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related CareerStudents from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getCareerStudentsJoinSubOrientation($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCareerStudents === null) {
			if ($this->isNew()) {
				$this->collCareerStudents = array();
			} else {

				$criteria->add(CareerStudentPeer::GRADUATION_SCHOOL_YEAR_ID, $this->id);

				$this->collCareerStudents = CareerStudentPeer::doSelectJoinSubOrientation($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CareerStudentPeer::GRADUATION_SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastCareerStudentCriteria) || !$this->lastCareerStudentCriteria->equals($criteria)) {
				$this->collCareerStudents = CareerStudentPeer::doSelectJoinSubOrientation($criteria, $con, $join_behavior);
			}
		}
		$this->lastCareerStudentCriteria = $criteria;

		return $this->collCareerStudents;
	}

	/**
	 * Clears out the collCareerSchoolYears collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCareerSchoolYears()
	 */
	public function clearCareerSchoolYears()
	{
		$this->collCareerSchoolYears = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCareerSchoolYears collection (array).
	 *
	 * By default this just sets the collCareerSchoolYears collection to an empty array (like clearcollCareerSchoolYears());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCareerSchoolYears()
	{
		$this->collCareerSchoolYears = array();
	}

	/**
	 * Gets an array of CareerSchoolYear objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SchoolYear has previously been saved, it will retrieve
	 * related CareerSchoolYears from storage. If this SchoolYear is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CareerSchoolYear[]
	 * @throws     PropelException
	 */
	public function getCareerSchoolYears($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCareerSchoolYears === null) {
			if ($this->isNew()) {
			   $this->collCareerSchoolYears = array();
			} else {

				$criteria->add(CareerSchoolYearPeer::SCHOOL_YEAR_ID, $this->id);

				CareerSchoolYearPeer::addSelectColumns($criteria);
				$this->collCareerSchoolYears = CareerSchoolYearPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CareerSchoolYearPeer::SCHOOL_YEAR_ID, $this->id);

				CareerSchoolYearPeer::addSelectColumns($criteria);
				if (!isset($this->lastCareerSchoolYearCriteria) || !$this->lastCareerSchoolYearCriteria->equals($criteria)) {
					$this->collCareerSchoolYears = CareerSchoolYearPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCareerSchoolYearCriteria = $criteria;
		return $this->collCareerSchoolYears;
	}

	/**
	 * Returns the number of related CareerSchoolYear objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CareerSchoolYear objects.
	 * @throws     PropelException
	 */
	public function countCareerSchoolYears(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCareerSchoolYears === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CareerSchoolYearPeer::SCHOOL_YEAR_ID, $this->id);

				$count = CareerSchoolYearPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CareerSchoolYearPeer::SCHOOL_YEAR_ID, $this->id);

				if (!isset($this->lastCareerSchoolYearCriteria) || !$this->lastCareerSchoolYearCriteria->equals($criteria)) {
					$count = CareerSchoolYearPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCareerSchoolYears);
				}
			} else {
				$count = count($this->collCareerSchoolYears);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CareerSchoolYear object to this object
	 * through the CareerSchoolYear foreign key attribute.
	 *
	 * @param      CareerSchoolYear $l CareerSchoolYear
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCareerSchoolYear(CareerSchoolYear $l)
	{
		if ($this->collCareerSchoolYears === null) {
			$this->initCareerSchoolYears();
		}
		if (!in_array($l, $this->collCareerSchoolYears, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCareerSchoolYears, $l);
			$l->setSchoolYear($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related CareerSchoolYears from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getCareerSchoolYearsJoinCareer($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCareerSchoolYears === null) {
			if ($this->isNew()) {
				$this->collCareerSchoolYears = array();
			} else {

				$criteria->add(CareerSchoolYearPeer::SCHOOL_YEAR_ID, $this->id);

				$this->collCareerSchoolYears = CareerSchoolYearPeer::doSelectJoinCareer($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CareerSchoolYearPeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastCareerSchoolYearCriteria) || !$this->lastCareerSchoolYearCriteria->equals($criteria)) {
				$this->collCareerSchoolYears = CareerSchoolYearPeer::doSelectJoinCareer($criteria, $con, $join_behavior);
			}
		}
		$this->lastCareerSchoolYearCriteria = $criteria;

		return $this->collCareerSchoolYears;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related CareerSchoolYears from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getCareerSchoolYearsJoinSubjectConfiguration($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCareerSchoolYears === null) {
			if ($this->isNew()) {
				$this->collCareerSchoolYears = array();
			} else {

				$criteria->add(CareerSchoolYearPeer::SCHOOL_YEAR_ID, $this->id);

				$this->collCareerSchoolYears = CareerSchoolYearPeer::doSelectJoinSubjectConfiguration($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CareerSchoolYearPeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastCareerSchoolYearCriteria) || !$this->lastCareerSchoolYearCriteria->equals($criteria)) {
				$this->collCareerSchoolYears = CareerSchoolYearPeer::doSelectJoinSubjectConfiguration($criteria, $con, $join_behavior);
			}
		}
		$this->lastCareerSchoolYearCriteria = $criteria;

		return $this->collCareerSchoolYears;
	}

	/**
	 * Clears out the collSchoolYearStudents collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSchoolYearStudents()
	 */
	public function clearSchoolYearStudents()
	{
		$this->collSchoolYearStudents = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSchoolYearStudents collection (array).
	 *
	 * By default this just sets the collSchoolYearStudents collection to an empty array (like clearcollSchoolYearStudents());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSchoolYearStudents()
	{
		$this->collSchoolYearStudents = array();
	}

	/**
	 * Gets an array of SchoolYearStudent objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SchoolYear has previously been saved, it will retrieve
	 * related SchoolYearStudents from storage. If this SchoolYear is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SchoolYearStudent[]
	 * @throws     PropelException
	 */
	public function getSchoolYearStudents($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchoolYearStudents === null) {
			if ($this->isNew()) {
			   $this->collSchoolYearStudents = array();
			} else {

				$criteria->add(SchoolYearStudentPeer::SCHOOL_YEAR_ID, $this->id);

				SchoolYearStudentPeer::addSelectColumns($criteria);
				$this->collSchoolYearStudents = SchoolYearStudentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SchoolYearStudentPeer::SCHOOL_YEAR_ID, $this->id);

				SchoolYearStudentPeer::addSelectColumns($criteria);
				if (!isset($this->lastSchoolYearStudentCriteria) || !$this->lastSchoolYearStudentCriteria->equals($criteria)) {
					$this->collSchoolYearStudents = SchoolYearStudentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSchoolYearStudentCriteria = $criteria;
		return $this->collSchoolYearStudents;
	}

	/**
	 * Returns the number of related SchoolYearStudent objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SchoolYearStudent objects.
	 * @throws     PropelException
	 */
	public function countSchoolYearStudents(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSchoolYearStudents === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SchoolYearStudentPeer::SCHOOL_YEAR_ID, $this->id);

				$count = SchoolYearStudentPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SchoolYearStudentPeer::SCHOOL_YEAR_ID, $this->id);

				if (!isset($this->lastSchoolYearStudentCriteria) || !$this->lastSchoolYearStudentCriteria->equals($criteria)) {
					$count = SchoolYearStudentPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSchoolYearStudents);
				}
			} else {
				$count = count($this->collSchoolYearStudents);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SchoolYearStudent object to this object
	 * through the SchoolYearStudent foreign key attribute.
	 *
	 * @param      SchoolYearStudent $l SchoolYearStudent
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSchoolYearStudent(SchoolYearStudent $l)
	{
		if ($this->collSchoolYearStudents === null) {
			$this->initSchoolYearStudents();
		}
		if (!in_array($l, $this->collSchoolYearStudents, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSchoolYearStudents, $l);
			$l->setSchoolYear($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related SchoolYearStudents from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getSchoolYearStudentsJoinStudent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchoolYearStudents === null) {
			if ($this->isNew()) {
				$this->collSchoolYearStudents = array();
			} else {

				$criteria->add(SchoolYearStudentPeer::SCHOOL_YEAR_ID, $this->id);

				$this->collSchoolYearStudents = SchoolYearStudentPeer::doSelectJoinStudent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchoolYearStudentPeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastSchoolYearStudentCriteria) || !$this->lastSchoolYearStudentCriteria->equals($criteria)) {
				$this->collSchoolYearStudents = SchoolYearStudentPeer::doSelectJoinStudent($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchoolYearStudentCriteria = $criteria;

		return $this->collSchoolYearStudents;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related SchoolYearStudents from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getSchoolYearStudentsJoinShift($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchoolYearStudents === null) {
			if ($this->isNew()) {
				$this->collSchoolYearStudents = array();
			} else {

				$criteria->add(SchoolYearStudentPeer::SCHOOL_YEAR_ID, $this->id);

				$this->collSchoolYearStudents = SchoolYearStudentPeer::doSelectJoinShift($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchoolYearStudentPeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastSchoolYearStudentCriteria) || !$this->lastSchoolYearStudentCriteria->equals($criteria)) {
				$this->collSchoolYearStudents = SchoolYearStudentPeer::doSelectJoinShift($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchoolYearStudentCriteria = $criteria;

		return $this->collSchoolYearStudents;
	}

	/**
	 * Clears out the collStudentDisciplinarySanctions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addStudentDisciplinarySanctions()
	 */
	public function clearStudentDisciplinarySanctions()
	{
		$this->collStudentDisciplinarySanctions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collStudentDisciplinarySanctions collection (array).
	 *
	 * By default this just sets the collStudentDisciplinarySanctions collection to an empty array (like clearcollStudentDisciplinarySanctions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initStudentDisciplinarySanctions()
	{
		$this->collStudentDisciplinarySanctions = array();
	}

	/**
	 * Gets an array of StudentDisciplinarySanction objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SchoolYear has previously been saved, it will retrieve
	 * related StudentDisciplinarySanctions from storage. If this SchoolYear is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array StudentDisciplinarySanction[]
	 * @throws     PropelException
	 */
	public function getStudentDisciplinarySanctions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctions === null) {
			if ($this->isNew()) {
			   $this->collStudentDisciplinarySanctions = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::SCHOOL_YEAR_ID, $this->id);

				StudentDisciplinarySanctionPeer::addSelectColumns($criteria);
				$this->collStudentDisciplinarySanctions = StudentDisciplinarySanctionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(StudentDisciplinarySanctionPeer::SCHOOL_YEAR_ID, $this->id);

				StudentDisciplinarySanctionPeer::addSelectColumns($criteria);
				if (!isset($this->lastStudentDisciplinarySanctionCriteria) || !$this->lastStudentDisciplinarySanctionCriteria->equals($criteria)) {
					$this->collStudentDisciplinarySanctions = StudentDisciplinarySanctionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastStudentDisciplinarySanctionCriteria = $criteria;
		return $this->collStudentDisciplinarySanctions;
	}

	/**
	 * Returns the number of related StudentDisciplinarySanction objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related StudentDisciplinarySanction objects.
	 * @throws     PropelException
	 */
	public function countStudentDisciplinarySanctions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collStudentDisciplinarySanctions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::SCHOOL_YEAR_ID, $this->id);

				$count = StudentDisciplinarySanctionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(StudentDisciplinarySanctionPeer::SCHOOL_YEAR_ID, $this->id);

				if (!isset($this->lastStudentDisciplinarySanctionCriteria) || !$this->lastStudentDisciplinarySanctionCriteria->equals($criteria)) {
					$count = StudentDisciplinarySanctionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collStudentDisciplinarySanctions);
				}
			} else {
				$count = count($this->collStudentDisciplinarySanctions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a StudentDisciplinarySanction object to this object
	 * through the StudentDisciplinarySanction foreign key attribute.
	 *
	 * @param      StudentDisciplinarySanction $l StudentDisciplinarySanction
	 * @return     void
	 * @throws     PropelException
	 */
	public function addStudentDisciplinarySanction(StudentDisciplinarySanction $l)
	{
		if ($this->collStudentDisciplinarySanctions === null) {
			$this->initStudentDisciplinarySanctions();
		}
		if (!in_array($l, $this->collStudentDisciplinarySanctions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collStudentDisciplinarySanctions, $l);
			$l->setSchoolYear($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related StudentDisciplinarySanctions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getStudentDisciplinarySanctionsJoinStudent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctions === null) {
			if ($this->isNew()) {
				$this->collStudentDisciplinarySanctions = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::SCHOOL_YEAR_ID, $this->id);

				$this->collStudentDisciplinarySanctions = StudentDisciplinarySanctionPeer::doSelectJoinStudent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentDisciplinarySanctionPeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastStudentDisciplinarySanctionCriteria) || !$this->lastStudentDisciplinarySanctionCriteria->equals($criteria)) {
				$this->collStudentDisciplinarySanctions = StudentDisciplinarySanctionPeer::doSelectJoinStudent($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentDisciplinarySanctionCriteria = $criteria;

		return $this->collStudentDisciplinarySanctions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related StudentDisciplinarySanctions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getStudentDisciplinarySanctionsJoinDisciplinarySanctionType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctions === null) {
			if ($this->isNew()) {
				$this->collStudentDisciplinarySanctions = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::SCHOOL_YEAR_ID, $this->id);

				$this->collStudentDisciplinarySanctions = StudentDisciplinarySanctionPeer::doSelectJoinDisciplinarySanctionType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentDisciplinarySanctionPeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastStudentDisciplinarySanctionCriteria) || !$this->lastStudentDisciplinarySanctionCriteria->equals($criteria)) {
				$this->collStudentDisciplinarySanctions = StudentDisciplinarySanctionPeer::doSelectJoinDisciplinarySanctionType($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentDisciplinarySanctionCriteria = $criteria;

		return $this->collStudentDisciplinarySanctions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related StudentDisciplinarySanctions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getStudentDisciplinarySanctionsJoinSanctionType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctions === null) {
			if ($this->isNew()) {
				$this->collStudentDisciplinarySanctions = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::SCHOOL_YEAR_ID, $this->id);

				$this->collStudentDisciplinarySanctions = StudentDisciplinarySanctionPeer::doSelectJoinSanctionType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentDisciplinarySanctionPeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastStudentDisciplinarySanctionCriteria) || !$this->lastStudentDisciplinarySanctionCriteria->equals($criteria)) {
				$this->collStudentDisciplinarySanctions = StudentDisciplinarySanctionPeer::doSelectJoinSanctionType($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentDisciplinarySanctionCriteria = $criteria;

		return $this->collStudentDisciplinarySanctions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related StudentDisciplinarySanctions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getStudentDisciplinarySanctionsJoinPersonRelatedByApplicantId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctions === null) {
			if ($this->isNew()) {
				$this->collStudentDisciplinarySanctions = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::SCHOOL_YEAR_ID, $this->id);

				$this->collStudentDisciplinarySanctions = StudentDisciplinarySanctionPeer::doSelectJoinPersonRelatedByApplicantId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentDisciplinarySanctionPeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastStudentDisciplinarySanctionCriteria) || !$this->lastStudentDisciplinarySanctionCriteria->equals($criteria)) {
				$this->collStudentDisciplinarySanctions = StudentDisciplinarySanctionPeer::doSelectJoinPersonRelatedByApplicantId($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentDisciplinarySanctionCriteria = $criteria;

		return $this->collStudentDisciplinarySanctions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SchoolYear is new, it will return
	 * an empty collection; or if this SchoolYear has previously
	 * been saved, it will retrieve related StudentDisciplinarySanctions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SchoolYear.
	 */
	public function getStudentDisciplinarySanctionsJoinPersonRelatedByResponsibleId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SchoolYearPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudentDisciplinarySanctions === null) {
			if ($this->isNew()) {
				$this->collStudentDisciplinarySanctions = array();
			} else {

				$criteria->add(StudentDisciplinarySanctionPeer::SCHOOL_YEAR_ID, $this->id);

				$this->collStudentDisciplinarySanctions = StudentDisciplinarySanctionPeer::doSelectJoinPersonRelatedByResponsibleId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudentDisciplinarySanctionPeer::SCHOOL_YEAR_ID, $this->id);

			if (!isset($this->lastStudentDisciplinarySanctionCriteria) || !$this->lastStudentDisciplinarySanctionCriteria->equals($criteria)) {
				$this->collStudentDisciplinarySanctions = StudentDisciplinarySanctionPeer::doSelectJoinPersonRelatedByResponsibleId($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudentDisciplinarySanctionCriteria = $criteria;

		return $this->collStudentDisciplinarySanctions;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collCourses) {
				foreach ((array) $this->collCourses as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collStudentApprovedCareerSubjects) {
				foreach ((array) $this->collStudentApprovedCareerSubjects as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collStudentApprovedCourseSubjects) {
				foreach ((array) $this->collStudentApprovedCourseSubjects as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collExaminations) {
				foreach ((array) $this->collExaminations as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collExaminationRepproveds) {
				foreach ((array) $this->collExaminationRepproveds as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPathways) {
				foreach ((array) $this->collPathways as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCareerStudents) {
				foreach ((array) $this->collCareerStudents as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCareerSchoolYears) {
				foreach ((array) $this->collCareerSchoolYears as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSchoolYearStudents) {
				foreach ((array) $this->collSchoolYearStudents as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collStudentDisciplinarySanctions) {
				foreach ((array) $this->collStudentDisciplinarySanctions as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collCourses = null;
		$this->collStudentApprovedCareerSubjects = null;
		$this->collStudentApprovedCourseSubjects = null;
		$this->collExaminations = null;
		$this->collExaminationRepproveds = null;
		$this->collPathways = null;
		$this->collCareerStudents = null;
		$this->collCareerSchoolYears = null;
		$this->collSchoolYearStudents = null;
		$this->collStudentDisciplinarySanctions = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseSchoolYear:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseSchoolYear::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseSchoolYear
